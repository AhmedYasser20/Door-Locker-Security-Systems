
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000035de  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000f6  008000f6  00003708  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d6  00000000  00000000  00006a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000801e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000818e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000acc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c62b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 19 	call	0x3332	; 0x3332 <main>
      8a:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Timer1_init>:

void (*CallBack_Ptr)(void) = NULL_PTR; // Initialize a function pointer to NULL

// Initialize Timer1 with the provided configuration
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <Timer1_init+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
    // Check if the mode is CTC Mode
    if (Config_Ptr->mode == CTC_Mode) {
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	85 81       	ldd	r24, Z+5	; 0x05
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	91 f5       	brne	.+100    	; 0x123e <Timer1_init+0x7c>
        SET_BIT(TCCR1A, FOC1A);  // Set Force Output Compare A (FOC1A) bit
    11da:	af e4       	ldi	r26, 0x4F	; 79
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ef e4       	ldi	r30, 0x4F	; 79
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 60       	ori	r24, 0x08	; 8
    11e6:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);  // Set Waveform Generation Mode (WGM12) bit
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 60       	ori	r24, 0x08	; 8
    11f4:	8c 93       	st	X, r24
        TCCR1B |= Config_Ptr->prescaler; // Set the prescaler value
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	90 81       	ld	r25, Z
    1200:	e9 81       	ldd	r30, Y+1	; 0x01
    1202:	fa 81       	ldd	r31, Y+2	; 0x02
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	89 2b       	or	r24, r25
    1208:	8c 93       	st	X, r24
        TCNT1 = Config_Ptr->intial_value; // Set the initial value of the timer
    120a:	ac e4       	ldi	r26, 0x4C	; 76
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	11 96       	adiw	r26, 0x01	; 1
    1218:	9c 93       	st	X, r25
    121a:	8e 93       	st	-X, r24
        OCR1A = Config_Ptr->compare_value; // Set the compare value for generating interrupts
    121c:	aa e4       	ldi	r26, 0x4A	; 74
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e9 81       	ldd	r30, Y+1	; 0x01
    1222:	fa 81       	ldd	r31, Y+2	; 0x02
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, OCIE1A); // Enable Output Compare A Match interrupt
    122e:	a9 e5       	ldi	r26, 0x59	; 89
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e9 e5       	ldi	r30, 0x59	; 89
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 61       	ori	r24, 0x10	; 16
    123a:	8c 93       	st	X, r24
    123c:	21 c0       	rjmp	.+66     	; 0x1280 <Timer1_init+0xbe>
    } else {
        SET_BIT(TCCR1A, FOC1A); // Set Force Output Compare A (FOC1A) bit
    123e:	af e4       	ldi	r26, 0x4F	; 79
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ef e4       	ldi	r30, 0x4F	; 79
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	88 60       	ori	r24, 0x08	; 8
    124a:	8c 93       	st	X, r24
        TCCR1B |= Config_Ptr->prescaler; // Set the prescaler value
    124c:	ae e4       	ldi	r26, 0x4E	; 78
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ee e4       	ldi	r30, 0x4E	; 78
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	90 81       	ld	r25, Z
    1256:	e9 81       	ldd	r30, Y+1	; 0x01
    1258:	fa 81       	ldd	r31, Y+2	; 0x02
    125a:	84 81       	ldd	r24, Z+4	; 0x04
    125c:	89 2b       	or	r24, r25
    125e:	8c 93       	st	X, r24
        TCNT1 = Config_Ptr->intial_value; // Set the initial value of the timer
    1260:	ac e4       	ldi	r26, 0x4C	; 76
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	9c 93       	st	X, r25
    1270:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, TOIE1); // Enable Timer Overflow interrupt
    1272:	a9 e5       	ldi	r26, 0x59	; 89
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e9 e5       	ldi	r30, 0x59	; 89
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	84 60       	ori	r24, 0x04	; 4
    127e:	8c 93       	st	X, r24
    }
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <Timer1_deInit>:

// Deinitialize Timer1 by resetting its registers and callback function pointer
void Timer1_deInit(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    TCCR1A = 0; // Reset Timer Control Register A
    1292:	ef e4       	ldi	r30, 0x4F	; 79
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	10 82       	st	Z, r1
    TIMSK = 0;  // Reset Timer Interrupt Mask Register
    1298:	e9 e5       	ldi	r30, 0x59	; 89
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	10 82       	st	Z, r1
    CallBack_Ptr = NULL_PTR; // Set the callback function pointer to NULL
    129e:	10 92 f7 00 	sts	0x00F7, r1
    12a2:	10 92 f6 00 	sts	0x00F6, r1
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Timer1_setCallBack>:

// Set a callback function to be called on timer events
void Timer1_setCallBack(void(*a_ptr)(void))
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <Timer1_setCallBack+0x6>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    CallBack_Ptr = a_ptr; // Set the callback function pointer
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	90 93 f7 00 	sts	0x00F7, r25
    12c2:	80 93 f6 00 	sts	0x00F6, r24
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <__vector_7>:

// Interrupt Service Routine (ISR) for the Timer1 Output Compare A Match
ISR(TIMER1_COMPA_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0; // Reset the timer
    12fa:	ec e4       	ldi	r30, 0x4C	; 76
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	11 82       	std	Z+1, r1	; 0x01
    1300:	10 82       	st	Z, r1
    if (CallBack_Ptr != NULL_PTR) {
    1302:	80 91 f6 00 	lds	r24, 0x00F6
    1306:	90 91 f7 00 	lds	r25, 0x00F7
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	29 f0       	breq	.+10     	; 0x1318 <__vector_7+0x48>
        CallBack_Ptr(); // Call the callback function if it is not NULL
    130e:	e0 91 f6 00 	lds	r30, 0x00F6
    1312:	f0 91 f7 00 	lds	r31, 0x00F7
    1316:	09 95       	icall
    }
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_9>:

// Interrupt Service Routine (ISR) for the Timer1 Overflow
ISR(TIMER1_OVF_vect)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0; // Reset the timer
    1368:	ec e4       	ldi	r30, 0x4C	; 76
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	11 82       	std	Z+1, r1	; 0x01
    136e:	10 82       	st	Z, r1
    if (CallBack_Ptr != NULL_PTR) {
    1370:	80 91 f6 00 	lds	r24, 0x00F6
    1374:	90 91 f7 00 	lds	r25, 0x00F7
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	29 f0       	breq	.+10     	; 0x1386 <__vector_9+0x48>
        CallBack_Ptr(); // Call the callback function if it is not NULL
    137c:	e0 91 f6 00 	lds	r30, 0x00F6
    1380:	f0 91 f7 00 	lds	r31, 0x00F7
    1384:	09 95       	icall
    }
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <UART_init+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <UART_init+0x8>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    13bc:	1a 82       	std	Y+2, r1	; 0x02
    13be:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    13c0:	eb e2       	ldi	r30, 0x2B	; 43
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    13c8:	ea e2       	ldi	r30, 0x2A	; 42
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	88 e1       	ldi	r24, 0x18	; 24
    13ce:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    13d0:	e0 e4       	ldi	r30, 0x40	; 64
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 e8       	ldi	r24, 0x80	; 128
    13d6:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==Five_Bit){
    13d8:	eb 81       	ldd	r30, Y+3	; 0x03
    13da:	fc 81       	ldd	r31, Y+4	; 0x04
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	b1 f4       	brne	.+44     	; 0x140e <UART_init+0x62>
		CLEAR_BIT(UCSRB,UCSZ2);
    13e2:	aa e2       	ldi	r26, 0x2A	; 42
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ea e2       	ldi	r30, 0x2A	; 42
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8b 7f       	andi	r24, 0xFB	; 251
    13ee:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    13f0:	a0 e4       	ldi	r26, 0x40	; 64
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e0 e4       	ldi	r30, 0x40	; 64
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8b 7f       	andi	r24, 0xFB	; 251
    13fc:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    13fe:	a0 e4       	ldi	r26, 0x40	; 64
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e0 e4       	ldi	r30, 0x40	; 64
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8d 7f       	andi	r24, 0xFD	; 253
    140a:	8c 93       	st	X, r24
    140c:	66 c0       	rjmp	.+204    	; 0x14da <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data ==Six_Bit){
    140e:	eb 81       	ldd	r30, Y+3	; 0x03
    1410:	fc 81       	ldd	r31, Y+4	; 0x04
    1412:	80 81       	ld	r24, Z
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	b1 f4       	brne	.+44     	; 0x1444 <UART_init+0x98>
		CLEAR_BIT(UCSRB,UCSZ2);
    1418:	aa e2       	ldi	r26, 0x2A	; 42
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ea e2       	ldi	r30, 0x2A	; 42
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8b 7f       	andi	r24, 0xFB	; 251
    1424:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    1426:	a0 e4       	ldi	r26, 0x40	; 64
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e0 e4       	ldi	r30, 0x40	; 64
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8b 7f       	andi	r24, 0xFB	; 251
    1432:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    1434:	a0 e4       	ldi	r26, 0x40	; 64
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e4       	ldi	r30, 0x40	; 64
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	8c 93       	st	X, r24
    1442:	4b c0       	rjmp	.+150    	; 0x14da <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data==Seven_Bit){
    1444:	eb 81       	ldd	r30, Y+3	; 0x03
    1446:	fc 81       	ldd	r31, Y+4	; 0x04
    1448:	80 81       	ld	r24, Z
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	b1 f4       	brne	.+44     	; 0x147a <UART_init+0xce>
		CLEAR_BIT(UCSRB,UCSZ2);
    144e:	aa e2       	ldi	r26, 0x2A	; 42
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e2       	ldi	r30, 0x2A	; 42
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8b 7f       	andi	r24, 0xFB	; 251
    145a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    145c:	a0 e4       	ldi	r26, 0x40	; 64
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e0 e4       	ldi	r30, 0x40	; 64
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	84 60       	ori	r24, 0x04	; 4
    1468:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    146a:	a0 e4       	ldi	r26, 0x40	; 64
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e0 e4       	ldi	r30, 0x40	; 64
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8d 7f       	andi	r24, 0xFD	; 253
    1476:	8c 93       	st	X, r24
    1478:	30 c0       	rjmp	.+96     	; 0x14da <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data==Eight_Bit){
    147a:	eb 81       	ldd	r30, Y+3	; 0x03
    147c:	fc 81       	ldd	r31, Y+4	; 0x04
    147e:	80 81       	ld	r24, Z
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	b1 f4       	brne	.+44     	; 0x14b0 <UART_init+0x104>
		CLEAR_BIT(UCSRB,UCSZ2);
    1484:	aa e2       	ldi	r26, 0x2A	; 42
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ea e2       	ldi	r30, 0x2A	; 42
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1492:	a0 e4       	ldi	r26, 0x40	; 64
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e0 e4       	ldi	r30, 0x40	; 64
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    14a0:	a0 e4       	ldi	r26, 0x40	; 64
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e0 e4       	ldi	r30, 0x40	; 64
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	8c 93       	st	X, r24
    14ae:	15 c0       	rjmp	.+42     	; 0x14da <UART_init+0x12e>
	}
	else{
		SET_BIT(UCSRB,UCSZ2);
    14b0:	aa e2       	ldi	r26, 0x2A	; 42
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ea e2       	ldi	r30, 0x2A	; 42
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	84 60       	ori	r24, 0x04	; 4
    14bc:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    14be:	a0 e4       	ldi	r26, 0x40	; 64
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	84 60       	ori	r24, 0x04	; 4
    14ca:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    14cc:	a0 e4       	ldi	r26, 0x40	; 64
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e0 e4       	ldi	r30, 0x40	; 64
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	82 60       	ori	r24, 0x02	; 2
    14d8:	8c 93       	st	X, r24
	}


	if(Config_Ptr->stop_bit==One_Bit){
    14da:	eb 81       	ldd	r30, Y+3	; 0x03
    14dc:	fc 81       	ldd	r31, Y+4	; 0x04
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	88 23       	and	r24, r24
    14e2:	41 f4       	brne	.+16     	; 0x14f4 <UART_init+0x148>
		CLEAR_BIT(UCSRC,USBS);
    14e4:	a0 e4       	ldi	r26, 0x40	; 64
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e0 e4       	ldi	r30, 0x40	; 64
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	87 7f       	andi	r24, 0xF7	; 247
    14f0:	8c 93       	st	X, r24
    14f2:	0c c0       	rjmp	.+24     	; 0x150c <UART_init+0x160>
	}
	else if(Config_Ptr->stop_bit==Two_Bit){
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	39 f4       	brne	.+14     	; 0x150c <UART_init+0x160>
		SET_BIT(UCSRC,USBS);
    14fe:	a0 e4       	ldi	r26, 0x40	; 64
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e0 e4       	ldi	r30, 0x40	; 64
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 60       	ori	r24, 0x08	; 8
    150a:	8c 93       	st	X, r24
	}

	if(Config_Ptr->parity==Disabled){
    150c:	eb 81       	ldd	r30, Y+3	; 0x03
    150e:	fc 81       	ldd	r31, Y+4	; 0x04
    1510:	81 81       	ldd	r24, Z+1	; 0x01
    1512:	88 23       	and	r24, r24
    1514:	79 f4       	brne	.+30     	; 0x1534 <UART_init+0x188>
		CLEAR_BIT(UCSRC,UPM0);
    1516:	a0 e4       	ldi	r26, 0x40	; 64
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e0 e4       	ldi	r30, 0x40	; 64
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 7e       	andi	r24, 0xEF	; 239
    1522:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1524:	a0 e4       	ldi	r26, 0x40	; 64
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e0 e4       	ldi	r30, 0x40	; 64
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7d       	andi	r24, 0xDF	; 223
    1530:	8c 93       	st	X, r24
    1532:	27 c0       	rjmp	.+78     	; 0x1582 <UART_init+0x1d6>
	}
	else if(Config_Ptr->parity==Enabled_Even_Parity){
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	81 81       	ldd	r24, Z+1	; 0x01
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	79 f4       	brne	.+30     	; 0x155c <UART_init+0x1b0>
		CLEAR_BIT(UCSRC,UPM0);
    153e:	a0 e4       	ldi	r26, 0x40	; 64
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e0 e4       	ldi	r30, 0x40	; 64
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8f 7e       	andi	r24, 0xEF	; 239
    154a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    154c:	a0 e4       	ldi	r26, 0x40	; 64
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e0 e4       	ldi	r30, 0x40	; 64
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 62       	ori	r24, 0x20	; 32
    1558:	8c 93       	st	X, r24
    155a:	13 c0       	rjmp	.+38     	; 0x1582 <UART_init+0x1d6>
	}
	else if(Config_Ptr->parity==Enabled_Odd_Parity){
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	81 81       	ldd	r24, Z+1	; 0x01
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	71 f4       	brne	.+28     	; 0x1582 <UART_init+0x1d6>
		SET_BIT(UCSRC,UPM0);
    1566:	a0 e4       	ldi	r26, 0x40	; 64
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e0 e4       	ldi	r30, 0x40	; 64
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 61       	ori	r24, 0x10	; 16
    1572:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1574:	a0 e4       	ldi	r26, 0x40	; 64
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e0 e4       	ldi	r30, 0x40	; 64
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 62       	ori	r24, 0x20	; 32
    1580:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	83 81       	ldd	r24, Z+3	; 0x03
    1588:	94 81       	ldd	r25, Z+4	; 0x04
    158a:	a5 81       	ldd	r26, Z+5	; 0x05
    158c:	b6 81       	ldd	r27, Z+6	; 0x06
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	aa 1f       	adc	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	aa 1f       	adc	r26, r26
    159c:	bb 1f       	adc	r27, r27
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	bb 1f       	adc	r27, r27
    15a6:	9c 01       	movw	r18, r24
    15a8:	ad 01       	movw	r20, r26
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	92 e1       	ldi	r25, 0x12	; 18
    15ae:	aa e7       	ldi	r26, 0x7A	; 122
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 4f 1a 	call	0x349e	; 0x349e <__udivmodsi4>
    15ba:	da 01       	movw	r26, r20
    15bc:	c9 01       	movw	r24, r18
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    15c4:	e0 e4       	ldi	r30, 0x40	; 64
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	89 2f       	mov	r24, r25
    15ce:	99 27       	eor	r25, r25
    15d0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    15d2:	e9 e2       	ldi	r30, 0x29	; 41
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 83       	st	Z, r24
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    15f4:	eb e2       	ldi	r30, 0x2B	; 43
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 72       	andi	r24, 0x20	; 32
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	b9 f3       	breq	.-18     	; 0x15f4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1606:	ec e2       	ldi	r30, 0x2C	; 44
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    161e:	eb e2       	ldi	r30, 0x2B	; 43
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	88 23       	and	r24, r24
    1626:	dc f7       	brge	.-10     	; 0x161e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1628:	ec e2       	ldi	r30, 0x2C	; 44
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <UART_sendString+0x6>
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9b 83       	std	Y+3, r25	; 0x03
    1642:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1644:	19 82       	std	Y+1, r1	; 0x01
    1646:	0e c0       	rjmp	.+28     	; 0x1664 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	fc 01       	movw	r30, r24
    1654:	e2 0f       	add	r30, r18
    1656:	f3 1f       	adc	r31, r19
    1658:	80 81       	ld	r24, Z
    165a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
		i++;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	fc 01       	movw	r30, r24
    1670:	e2 0f       	add	r30, r18
    1672:	f3 1f       	adc	r31, r19
    1674:	80 81       	ld	r24, Z
    1676:	88 23       	and	r24, r24
    1678:	39 f7       	brne	.-50     	; 0x1648 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <UART_receiveString+0xa>
    1690:	0f 92       	push	r0
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9b 83       	std	Y+3, r25	; 0x03
    1698:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    169a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	9b 81       	ldd	r25, Y+3	; 0x03
    16a6:	8c 01       	movw	r16, r24
    16a8:	02 0f       	add	r16, r18
    16aa:	13 1f       	adc	r17, r19
    16ac:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 83       	st	Z, r24
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	9b 81       	ldd	r25, Y+3	; 0x03
    16c6:	8c 01       	movw	r16, r24
    16c8:	02 0f       	add	r16, r18
    16ca:	13 1f       	adc	r17, r19
    16cc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	80 81       	ld	r24, Z
    16e6:	83 32       	cpi	r24, 0x23	; 35
    16e8:	31 f7       	brne	.-52     	; 0x16b6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	fc 01       	movw	r30, r24
    16f6:	e2 0f       	add	r30, r18
    16f8:	f3 1f       	adc	r31, r19
    16fa:	10 82       	st	Z, r1
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	60 97       	sbiw	r28, 0x10	; 16
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	64 e0       	ldi	r22, 0x04	; 4
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	65 e0       	ldi	r22, 0x05	; 5
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	66 e0       	ldi	r22, 0x06	; 6
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	64 e0       	ldi	r22, 0x04	; 4
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	65 e0       	ldi	r22, 0x05	; 5
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1770:	1f 86       	std	Y+15, r1	; 0x0f
    1772:	b4 c0       	rjmp	.+360    	; 0x18dc <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	98 2f       	mov	r25, r24
    1778:	9c 5f       	subi	r25, 0xFC	; 252
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	69 2f       	mov	r22, r25
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	98 2f       	mov	r25, r24
    1788:	9c 5f       	subi	r25, 0xFC	; 252
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	69 2f       	mov	r22, r25
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1794:	18 8a       	std	Y+16, r1	; 0x10
    1796:	22 c0       	rjmp	.+68     	; 0x17dc <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1798:	88 89       	ldd	r24, Y+16	; 0x10
    179a:	98 2f       	mov	r25, r24
    179c:	9e 5f       	subi	r25, 0xFE	; 254
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	69 2f       	mov	r22, r25
    17a2:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    17a6:	88 23       	and	r24, r24
    17a8:	b1 f4       	brne	.+44     	; 0x17d6 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    17aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	98 2f       	mov	r25, r24
    17ba:	88 89       	ldd	r24, Y+16	; 0x10
    17bc:	89 0f       	add	r24, r25
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    17c4:	60 96       	adiw	r28, 0x10	; 16
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17d6:	88 89       	ldd	r24, Y+16	; 0x10
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	88 8b       	std	Y+16, r24	; 0x10
    17dc:	88 89       	ldd	r24, Y+16	; 0x10
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	d8 f2       	brcs	.-74     	; 0x1798 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e4:	98 2f       	mov	r25, r24
    17e6:	9c 5f       	subi	r25, 0xFC	; 252
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	69 2f       	mov	r22, r25
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 ea       	ldi	r26, 0xA0	; 160
    17f8:	b0 e4       	ldi	r27, 0x40	; 64
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	a9 87       	std	Y+9, r26	; 0x09
    1820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <KEYPAD_getPressedKey+0x198>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <KEYPAD_getPressedKey+0x186>
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <KEYPAD_getPressedKey+0x17a>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <KEYPAD_getPressedKey+0x1c2>
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	8f 87       	std	Y+15, r24	; 0x0f
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <KEYPAD_getPressedKey+0x1d8>
    18e2:	48 cf       	rjmp	.-368    	; 0x1774 <KEYPAD_getPressedKey+0x68>
    18e4:	45 cf       	rjmp	.-374    	; 0x1770 <KEYPAD_getPressedKey+0x64>

000018e6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <KEYPAD_4x4_adjustKeyNumber+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3c 83       	std	Y+4, r19	; 0x04
    18fe:	2b 83       	std	Y+3, r18	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0x26>
    190a:	70 c0       	rjmp	.+224    	; 0x19ec <KEYPAD_4x4_adjustKeyNumber+0x106>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	29 30       	cpi	r18, 0x09	; 9
    1912:	31 05       	cpc	r19, r1
    1914:	5c f5       	brge	.+86     	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1920:	59 c0       	rjmp	.+178    	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	25 30       	cpi	r18, 0x05	; 5
    1928:	31 05       	cpc	r19, r1
    192a:	9c f4       	brge	.+38     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1936:	48 c0       	rjmp	.+144    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	23 30       	cpi	r18, 0x03	; 3
    193e:	31 05       	cpc	r19, r1
    1940:	0c f0       	brlt	.+2      	; 0x1944 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1942:	45 c0       	rjmp	.+138    	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    194e:	39 c0       	rjmp	.+114    	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1950:	67 c0       	rjmp	.+206    	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	26 30       	cpi	r18, 0x06	; 6
    1958:	31 05       	cpc	r19, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <KEYPAD_4x4_adjustKeyNumber+0x78>
    195c:	41 c0       	rjmp	.+130    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	87 30       	cpi	r24, 0x07	; 7
    1964:	91 05       	cpc	r25, r1
    1966:	0c f0       	brlt	.+2      	; 0x196a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1968:	3e c0       	rjmp	.+124    	; 0x19e6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    196a:	37 c0       	rjmp	.+110    	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0xf4>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	2c 30       	cpi	r18, 0x0C	; 12
    1972:	31 05       	cpc	r19, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1976:	46 c0       	rjmp	.+140    	; 0x1a04 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	8d 30       	cpi	r24, 0x0D	; 13
    197e:	91 05       	cpc	r25, r1
    1980:	5c f4       	brge	.+22     	; 0x1998 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	2a 30       	cpi	r18, 0x0A	; 10
    1988:	31 05       	cpc	r19, r1
    198a:	b1 f1       	breq	.+108    	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	8b 30       	cpi	r24, 0x0B	; 11
    1992:	91 05       	cpc	r25, r1
    1994:	a4 f5       	brge	.+104    	; 0x19fe <KEYPAD_4x4_adjustKeyNumber+0x118>
    1996:	2d c0       	rjmp	.+90     	; 0x19f2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	2e 30       	cpi	r18, 0x0E	; 14
    199e:	31 05       	cpc	r19, r1
    19a0:	b9 f1       	breq	.+110    	; 0x1a10 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	8e 30       	cpi	r24, 0x0E	; 14
    19a8:	91 05       	cpc	r25, r1
    19aa:	7c f1       	brlt	.+94     	; 0x1a0a <KEYPAD_4x4_adjustKeyNumber+0x124>
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	2f 30       	cpi	r18, 0x0F	; 15
    19b2:	31 05       	cpc	r19, r1
    19b4:	79 f1       	breq	.+94     	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	80 31       	cpi	r24, 0x10	; 16
    19bc:	91 05       	cpc	r25, r1
    19be:	69 f1       	breq	.+90     	; 0x1a1a <KEYPAD_4x4_adjustKeyNumber+0x134>
    19c0:	2f c0       	rjmp	.+94     	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19c2:	87 e0       	ldi	r24, 0x07	; 7
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	2e c0       	rjmp	.+92     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19c8:	88 e0       	ldi	r24, 0x08	; 8
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	2b c0       	rjmp	.+86     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	28 c0       	rjmp	.+80     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19d4:	85 e2       	ldi	r24, 0x25	; 37
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	25 c0       	rjmp	.+74     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	22 c0       	rjmp	.+68     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	1f c0       	rjmp	.+62     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19e6:	86 e0       	ldi	r24, 0x06	; 6
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	1c c0       	rjmp	.+56     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19ec:	8a e2       	ldi	r24, 0x2A	; 42
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	19 c0       	rjmp	.+50     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	16 c0       	rjmp	.+44     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	10 c0       	rjmp	.+32     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1a04:	8d e2       	ldi	r24, 0x2D	; 45
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	0d c0       	rjmp	.+26     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1a0a:	8d e0       	ldi	r24, 0x0D	; 13
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1a14:	8d e3       	ldi	r24, 0x3D	; 61
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a1a:	8b e2       	ldi	r24, 0x2B	; 43
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 ea       	ldi	r26, 0xA0	; 160
    1a62:	b1 e4       	ldi	r27, 0x41	; 65
    1a64:	8b 87       	std	Y+11, r24	; 0x0b
    1a66:	9c 87       	std	Y+12, r25	; 0x0c
    1a68:	ad 87       	std	Y+13, r26	; 0x0d
    1a6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a ef       	ldi	r20, 0xFA	; 250
    1a7a:	54 e4       	ldi	r21, 0x44	; 68
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8f 83       	std	Y+7, r24	; 0x07
    1a86:	98 87       	std	Y+8, r25	; 0x08
    1a88:	a9 87       	std	Y+9, r26	; 0x09
    1a8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <LCD_init+0x7a>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_init+0xda>
    1af0:	88 ec       	ldi	r24, 0xC8	; 200
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_init+0xc8>
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <LCD_init+0xbc>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_init+0x104>
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	65 e0       	ldi	r22, 0x05	; 5
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	66 e0       	ldi	r22, 0x06	; 6
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b68:	83 e3       	ldi	r24, 0x33	; 51
    1b6a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b6e:	82 e3       	ldi	r24, 0x32	; 50
    1b70:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b74:	88 e2       	ldi	r24, 0x28	; 40
    1b76:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b7a:	8c e0       	ldi	r24, 0x0C	; 12
    1b7c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
}
    1b86:	2e 96       	adiw	r28, 0x0e	; 14
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	c3 56       	subi	r28, 0x63	; 99
    1ba6:	d0 40       	sbci	r29, 0x00	; 0
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	ed 59       	subi	r30, 0x9D	; 157
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e1 5a       	subi	r30, 0xA1	; 161
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e8       	ldi	r26, 0x80	; 128
    1bd0:	bf e3       	ldi	r27, 0x3F	; 63
    1bd2:	80 83       	st	Z, r24
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	a2 83       	std	Z+2, r26	; 0x02
    1bd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	05 5a       	subi	r16, 0xA5	; 165
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e1 5a       	subi	r30, 0xA1	; 161
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	f8 01       	movw	r30, r16
    1c00:	80 83       	st	Z, r24
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	a2 83       	std	Z+2, r26	; 0x02
    1c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e5 5a       	subi	r30, 0xA5	; 165
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	44 f4       	brge	.+16     	; 0x1c36 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1c26:	fe 01       	movw	r30, r28
    1c28:	e7 5a       	subi	r30, 0xA7	; 167
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	64 c0       	rjmp	.+200    	; 0x1cfe <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c36:	fe 01       	movw	r30, r28
    1c38:	e5 5a       	subi	r30, 0xA5	; 165
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <LCD_sendCommand+0xbe>
    1c54:	43 c0       	rjmp	.+134    	; 0x1cdc <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	fe 01       	movw	r30, r28
    1c58:	e1 5a       	subi	r30, 0xA1	; 161
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8e 01       	movw	r16, r28
    1c76:	07 5a       	subi	r16, 0xA7	; 167
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	1f c0       	rjmp	.+62     	; 0x1ccc <LCD_sendCommand+0x134>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 5a       	subi	r30, 0xA9	; 169
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	88 ec       	ldi	r24, 0xC8	; 200
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e9 5a       	subi	r30, 0xA9	; 169
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <LCD_sendCommand+0x10e>
    1caa:	fe 01       	movw	r30, r28
    1cac:	e9 5a       	subi	r30, 0xA9	; 169
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	de 01       	movw	r26, r28
    1cb6:	a7 5a       	subi	r26, 0xA7	; 167
    1cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e7 5a       	subi	r30, 0xA7	; 167
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	9c 93       	st	X, r25
    1cca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e7 5a       	subi	r30, 0xA7	; 167
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	d1 f6       	brne	.-76     	; 0x1c8e <LCD_sendCommand+0xf6>
    1cda:	27 c0       	rjmp	.+78     	; 0x1d2a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	07 5a       	subi	r16, 0xA7	; 167
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e5 5a       	subi	r30, 0xA5	; 165
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	de 01       	movw	r26, r28
    1d00:	ab 5a       	subi	r26, 0xAB	; 171
    1d02:	bf 4f       	sbci	r27, 0xFF	; 255
    1d04:	fe 01       	movw	r30, r28
    1d06:	e7 5a       	subi	r30, 0xA7	; 167
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	8d 93       	st	X+, r24
    1d10:	9c 93       	st	X, r25
    1d12:	fe 01       	movw	r30, r28
    1d14:	eb 5a       	subi	r30, 0xAB	; 171
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	80 81       	ld	r24, Z
    1d1a:	91 81       	ldd	r25, Z+1	; 0x01
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x184>
    1d20:	fe 01       	movw	r30, r28
    1d22:	eb 5a       	subi	r30, 0xAB	; 171
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	62 e0       	ldi	r22, 0x02	; 2
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 5a       	subi	r30, 0xAF	; 175
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	03 5b       	subi	r16, 0xB3	; 179
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	ef 5a       	subi	r30, 0xAF	; 175
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	4a ef       	ldi	r20, 0xFA	; 250
    1d64:	54 e4       	ldi	r21, 0x44	; 68
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e3 5b       	subi	r30, 0xB3	; 179
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	44 f4       	brge	.+16     	; 0x1da6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d96:	fe 01       	movw	r30, r28
    1d98:	e5 5b       	subi	r30, 0xB5	; 181
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	64 c0       	rjmp	.+200    	; 0x1e6e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1da6:	fe 01       	movw	r30, r28
    1da8:	e3 5b       	subi	r30, 0xB3	; 179
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <LCD_sendCommand+0x22e>
    1dc4:	43 c0       	rjmp	.+134    	; 0x1e4c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ef 5a       	subi	r30, 0xAF	; 175
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8e 01       	movw	r16, r28
    1de6:	05 5b       	subi	r16, 0xB5	; 181
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
    1dfc:	1f c0       	rjmp	.+62     	; 0x1e3c <LCD_sendCommand+0x2a4>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e7 5b       	subi	r30, 0xB7	; 183
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e7 5b       	subi	r30, 0xB7	; 183
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x27e>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 5b       	subi	r30, 0xB7	; 183
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	de 01       	movw	r26, r28
    1e26:	a5 5b       	subi	r26, 0xB5	; 181
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 5b       	subi	r30, 0xB5	; 181
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e5 5b       	subi	r30, 0xB5	; 181
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	d1 f6       	brne	.-76     	; 0x1dfe <LCD_sendCommand+0x266>
    1e4a:	27 c0       	rjmp	.+78     	; 0x1e9a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	05 5b       	subi	r16, 0xB5	; 181
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e3 5b       	subi	r30, 0xB3	; 179
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	de 01       	movw	r26, r28
    1e70:	a9 5b       	subi	r26, 0xB9	; 185
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e5 5b       	subi	r30, 0xB5	; 181
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	8d 93       	st	X+, r24
    1e80:	9c 93       	st	X, r25
    1e82:	fe 01       	movw	r30, r28
    1e84:	e9 5b       	subi	r30, 0xB9	; 185
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0x2f4>
    1e90:	fe 01       	movw	r30, r28
    1e92:	e9 5b       	subi	r30, 0xB9	; 185
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ed 59       	subi	r30, 0x9D	; 157
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	80 81       	ld	r24, Z
    1ea2:	82 95       	swap	r24
    1ea4:	8f 70       	andi	r24, 0x0F	; 15
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	91 70       	andi	r25, 0x01	; 1
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	63 e0       	ldi	r22, 0x03	; 3
    1eae:	49 2f       	mov	r20, r25
    1eb0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ed 59       	subi	r30, 0x9D	; 157
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	82 95       	swap	r24
    1ebe:	86 95       	lsr	r24
    1ec0:	87 70       	andi	r24, 0x07	; 7
    1ec2:	98 2f       	mov	r25, r24
    1ec4:	91 70       	andi	r25, 0x01	; 1
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	64 e0       	ldi	r22, 0x04	; 4
    1eca:	49 2f       	mov	r20, r25
    1ecc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ed 59       	subi	r30, 0x9D	; 157
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	82 95       	swap	r24
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	83 70       	andi	r24, 0x03	; 3
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	91 70       	andi	r25, 0x01	; 1
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	65 e0       	ldi	r22, 0x05	; 5
    1ee8:	49 2f       	mov	r20, r25
    1eea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ed 59       	subi	r30, 0x9D	; 157
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	99 27       	eor	r25, r25
    1efc:	99 1f       	adc	r25, r25
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	66 e0       	ldi	r22, 0x06	; 6
    1f02:	49 2f       	mov	r20, r25
    1f04:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ed 5b       	subi	r30, 0xBD	; 189
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e8       	ldi	r26, 0x80	; 128
    1f14:	bf e3       	ldi	r27, 0x3F	; 63
    1f16:	80 83       	st	Z, r24
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	a2 83       	std	Z+2, r26	; 0x02
    1f1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	8e 01       	movw	r16, r28
    1f20:	01 5c       	subi	r16, 0xC1	; 193
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	fe 01       	movw	r30, r28
    1f26:	ed 5b       	subi	r30, 0xBD	; 189
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	f8 01       	movw	r30, r16
    1f44:	80 83       	st	Z, r24
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	a2 83       	std	Z+2, r26	; 0x02
    1f4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ff 96       	adiw	r30, 0x3f	; 63
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_sendCommand+0x3da>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9e af       	std	Y+62, r25	; 0x3e
    1f6e:	8d af       	std	Y+61, r24	; 0x3d
    1f70:	46 c0       	rjmp	.+140    	; 0x1ffe <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	ff 96       	adiw	r30, 0x3f	; 63
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	64 f5       	brge	.+88     	; 0x1fe6 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 5b       	subi	r30, 0xBD	; 189
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e af       	std	Y+62, r25	; 0x3e
    1fba:	8d af       	std	Y+61, r24	; 0x3d
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_sendCommand+0x444>
    1fbe:	88 ec       	ldi	r24, 0xC8	; 200
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9c af       	std	Y+60, r25	; 0x3c
    1fc4:	8b af       	std	Y+59, r24	; 0x3b
    1fc6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fc8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_sendCommand+0x432>
    1fce:	9c af       	std	Y+60, r25	; 0x3c
    1fd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9e af       	std	Y+62, r25	; 0x3e
    1fda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <LCD_sendCommand+0x426>
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ff 96       	adiw	r30, 0x3f	; 63
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e af       	std	Y+62, r25	; 0x3e
    1ffc:	8d af       	std	Y+61, r24	; 0x3d
    1ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2000:	9e ad       	ldd	r25, Y+62	; 0x3e
    2002:	9a af       	std	Y+58, r25	; 0x3a
    2004:	89 af       	std	Y+57, r24	; 0x39
    2006:	89 ad       	ldd	r24, Y+57	; 0x39
    2008:	9a ad       	ldd	r25, Y+58	; 0x3a
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x472>
    200e:	9a af       	std	Y+58, r25	; 0x3a
    2010:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	62 e0       	ldi	r22, 0x02	; 2
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e8       	ldi	r26, 0x80	; 128
    2022:	bf e3       	ldi	r27, 0x3F	; 63
    2024:	8d ab       	std	Y+53, r24	; 0x35
    2026:	9e ab       	std	Y+54, r25	; 0x36
    2028:	af ab       	std	Y+55, r26	; 0x37
    202a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6d a9       	ldd	r22, Y+53	; 0x35
    202e:	7e a9       	ldd	r23, Y+54	; 0x36
    2030:	8f a9       	ldd	r24, Y+55	; 0x37
    2032:	98 ad       	ldd	r25, Y+56	; 0x38
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	89 ab       	std	Y+49, r24	; 0x31
    2046:	9a ab       	std	Y+50, r25	; 0x32
    2048:	ab ab       	std	Y+51, r26	; 0x33
    204a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    204c:	69 a9       	ldd	r22, Y+49	; 0x31
    204e:	7a a9       	ldd	r23, Y+50	; 0x32
    2050:	8b a9       	ldd	r24, Y+51	; 0x33
    2052:	9c a9       	ldd	r25, Y+52	; 0x34
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <LCD_sendCommand+0x4d6>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	98 ab       	std	Y+48, r25	; 0x30
    206a:	8f a7       	std	Y+47, r24	; 0x2f
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    206e:	69 a9       	ldd	r22, Y+49	; 0x31
    2070:	7a a9       	ldd	r23, Y+50	; 0x32
    2072:	8b a9       	ldd	r24, Y+51	; 0x33
    2074:	9c a9       	ldd	r25, Y+52	; 0x34
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6d a9       	ldd	r22, Y+53	; 0x35
    2088:	7e a9       	ldd	r23, Y+54	; 0x36
    208a:	8f a9       	ldd	r24, Y+55	; 0x37
    208c:	98 ad       	ldd	r25, Y+56	; 0x38
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	98 ab       	std	Y+48, r25	; 0x30
    20ac:	8f a7       	std	Y+47, r24	; 0x2f
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <LCD_sendCommand+0x536>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e a7       	std	Y+46, r25	; 0x2e
    20b6:	8d a7       	std	Y+45, r24	; 0x2d
    20b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_sendCommand+0x524>
    20c0:	9e a7       	std	Y+46, r25	; 0x2e
    20c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c6:	98 a9       	ldd	r25, Y+48	; 0x30
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	98 ab       	std	Y+48, r25	; 0x30
    20cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d0:	98 a9       	ldd	r25, Y+48	; 0x30
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <LCD_sendCommand+0x518>
    20d6:	14 c0       	rjmp	.+40     	; 0x2100 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	69 a9       	ldd	r22, Y+49	; 0x31
    20da:	7a a9       	ldd	r23, Y+50	; 0x32
    20dc:	8b a9       	ldd	r24, Y+51	; 0x33
    20de:	9c a9       	ldd	r25, Y+52	; 0x34
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	98 ab       	std	Y+48, r25	; 0x30
    20ea:	8f a7       	std	Y+47, r24	; 0x2f
    20ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ee:	98 a9       	ldd	r25, Y+48	; 0x30
    20f0:	9c a7       	std	Y+44, r25	; 0x2c
    20f2:	8b a7       	std	Y+43, r24	; 0x2b
    20f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_sendCommand+0x560>
    20fc:	9c a7       	std	Y+44, r25	; 0x2c
    20fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e8       	ldi	r26, 0x80	; 128
    2110:	bf e3       	ldi	r27, 0x3F	; 63
    2112:	8f a3       	std	Y+39, r24	; 0x27
    2114:	98 a7       	std	Y+40, r25	; 0x28
    2116:	a9 a7       	std	Y+41, r26	; 0x29
    2118:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	6f a1       	ldd	r22, Y+39	; 0x27
    211c:	78 a5       	ldd	r23, Y+40	; 0x28
    211e:	89 a5       	ldd	r24, Y+41	; 0x29
    2120:	9a a5       	ldd	r25, Y+42	; 0x2a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a ef       	ldi	r20, 0xFA	; 250
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8b a3       	std	Y+35, r24	; 0x23
    2134:	9c a3       	std	Y+36, r25	; 0x24
    2136:	ad a3       	std	Y+37, r26	; 0x25
    2138:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213a:	6b a1       	ldd	r22, Y+35	; 0x23
    213c:	7c a1       	ldd	r23, Y+36	; 0x24
    213e:	8d a1       	ldd	r24, Y+37	; 0x25
    2140:	9e a1       	ldd	r25, Y+38	; 0x26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
    215a:	3f c0       	rjmp	.+126    	; 0x21da <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    215c:	6b a1       	ldd	r22, Y+35	; 0x23
    215e:	7c a1       	ldd	r23, Y+36	; 0x24
    2160:	8d a1       	ldd	r24, Y+37	; 0x25
    2162:	9e a1       	ldd	r25, Y+38	; 0x26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	57 e4       	ldi	r21, 0x47	; 71
    216c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	6f a1       	ldd	r22, Y+39	; 0x27
    2176:	78 a5       	ldd	r23, Y+40	; 0x28
    2178:	89 a5       	ldd	r24, Y+41	; 0x29
    217a:	9a a5       	ldd	r25, Y+42	; 0x2a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9a a3       	std	Y+34, r25	; 0x22
    219a:	89 a3       	std	Y+33, r24	; 0x21
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <LCD_sendCommand+0x624>
    219e:	88 ec       	ldi	r24, 0xC8	; 200
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	98 a3       	std	Y+32, r25	; 0x20
    21a4:	8f 8f       	std	Y+31, r24	; 0x1f
    21a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a8:	98 a1       	ldd	r25, Y+32	; 0x20
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_sendCommand+0x612>
    21ae:	98 a3       	std	Y+32, r25	; 0x20
    21b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	89 a1       	ldd	r24, Y+33	; 0x21
    21b4:	9a a1       	ldd	r25, Y+34	; 0x22
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9a a3       	std	Y+34, r25	; 0x22
    21ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	89 a1       	ldd	r24, Y+33	; 0x21
    21be:	9a a1       	ldd	r25, Y+34	; 0x22
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	69 f7       	brne	.-38     	; 0x219e <LCD_sendCommand+0x606>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	9e 8f       	std	Y+30, r25	; 0x1e
    21e0:	8d 8f       	std	Y+29, r24	; 0x1d
    21e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_sendCommand+0x64e>
    21ea:	9e 8f       	std	Y+30, r25	; 0x1e
    21ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 59       	subi	r30, 0x9D	; 157
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	98 2f       	mov	r25, r24
    21f8:	91 70       	andi	r25, 0x01	; 1
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	63 e0       	ldi	r22, 0x03	; 3
    21fe:	49 2f       	mov	r20, r25
    2200:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2204:	fe 01       	movw	r30, r28
    2206:	ed 59       	subi	r30, 0x9D	; 157
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	86 95       	lsr	r24
    220e:	98 2f       	mov	r25, r24
    2210:	91 70       	andi	r25, 0x01	; 1
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	49 2f       	mov	r20, r25
    2218:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    221c:	fe 01       	movw	r30, r28
    221e:	ed 59       	subi	r30, 0x9D	; 157
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	80 81       	ld	r24, Z
    2224:	86 95       	lsr	r24
    2226:	86 95       	lsr	r24
    2228:	98 2f       	mov	r25, r24
    222a:	91 70       	andi	r25, 0x01	; 1
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	65 e0       	ldi	r22, 0x05	; 5
    2230:	49 2f       	mov	r20, r25
    2232:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	66 e0       	ldi	r22, 0x06	; 6
    224c:	49 2f       	mov	r20, r25
    224e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	89 8f       	std	Y+25, r24	; 0x19
    225c:	9a 8f       	std	Y+26, r25	; 0x1a
    225e:	ab 8f       	std	Y+27, r26	; 0x1b
    2260:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	69 8d       	ldd	r22, Y+25	; 0x19
    2264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8d 8b       	std	Y+21, r24	; 0x15
    227c:	9e 8b       	std	Y+22, r25	; 0x16
    227e:	af 8b       	std	Y+23, r26	; 0x17
    2280:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2282:	6d 89       	ldd	r22, Y+21	; 0x15
    2284:	7e 89       	ldd	r23, Y+22	; 0x16
    2286:	8f 89       	ldd	r24, Y+23	; 0x17
    2288:	98 8d       	ldd	r25, Y+24	; 0x18
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_sendCommand+0x70c>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c 8b       	std	Y+20, r25	; 0x14
    22a0:	8b 8b       	std	Y+19, r24	; 0x13
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	69 8d       	ldd	r22, Y+25	; 0x19
    22be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9c 8b       	std	Y+20, r25	; 0x14
    22e2:	8b 8b       	std	Y+19, r24	; 0x13
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_sendCommand+0x76c>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9a 8b       	std	Y+18, r25	; 0x12
    22ec:	89 8b       	std	Y+17, r24	; 0x11
    22ee:	89 89       	ldd	r24, Y+17	; 0x11
    22f0:	9a 89       	ldd	r25, Y+18	; 0x12
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x75a>
    22f6:	9a 8b       	std	Y+18, r25	; 0x12
    22f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_sendCommand+0x74e>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9c 8b       	std	Y+20, r25	; 0x14
    2320:	8b 8b       	std	Y+19, r24	; 0x13
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	98 8b       	std	Y+16, r25	; 0x10
    2328:	8f 87       	std	Y+15, r24	; 0x0f
    232a:	8f 85       	ldd	r24, Y+15	; 0x0f
    232c:	98 89       	ldd	r25, Y+16	; 0x10
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0x796>
    2332:	98 8b       	std	Y+16, r25	; 0x10
    2334:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e8       	ldi	r26, 0x80	; 128
    2346:	bf e3       	ldi	r27, 0x3F	; 63
    2348:	8b 87       	std	Y+11, r24	; 0x0b
    234a:	9c 87       	std	Y+12, r25	; 0x0c
    234c:	ad 87       	std	Y+13, r26	; 0x0d
    234e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a ef       	ldi	r20, 0xFA	; 250
    235e:	54 e4       	ldi	r21, 0x44	; 68
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8f 83       	std	Y+7, r24	; 0x07
    236a:	98 87       	std	Y+8, r25	; 0x08
    236c:	a9 87       	std	Y+9, r26	; 0x09
    236e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	57 e4       	ldi	r21, 0x47	; 71
    23a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <LCD_sendCommand+0x85a>
    23d4:	88 ec       	ldi	r24, 0xC8	; 200
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_sendCommand+0x848>
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <LCD_sendCommand+0x83c>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <LCD_sendCommand+0x884>
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2424:	cd 59       	subi	r28, 0x9D	; 157
    2426:	df 4f       	sbci	r29, 0xFF	; 255
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	08 95       	ret

0000243c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	c3 56       	subi	r28, 0x63	; 99
    244a:	d0 40       	sbci	r29, 0x00	; 0
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	fe 01       	movw	r30, r28
    2458:	ed 59       	subi	r30, 0x9D	; 157
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2468:	fe 01       	movw	r30, r28
    246a:	e1 5a       	subi	r30, 0xA1	; 161
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	a0 e8       	ldi	r26, 0x80	; 128
    2474:	bf e3       	ldi	r27, 0x3F	; 63
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247e:	8e 01       	movw	r16, r28
    2480:	05 5a       	subi	r16, 0xA5	; 165
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e1 5a       	subi	r30, 0xA1	; 161
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	f8 01       	movw	r30, r16
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e5 5a       	subi	r30, 0xA5	; 165
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	44 f4       	brge	.+16     	; 0x24da <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24ca:	fe 01       	movw	r30, r28
    24cc:	e7 5a       	subi	r30, 0xA7	; 167
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	64 c0       	rjmp	.+200    	; 0x25a2 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5a       	subi	r30, 0xA5	; 165
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	0c f0       	brlt	.+2      	; 0x24fa <LCD_displayCharacter+0xbe>
    24f8:	43 c0       	rjmp	.+134    	; 0x2580 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	fe 01       	movw	r30, r28
    24fc:	e1 5a       	subi	r30, 0xA1	; 161
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8e 01       	movw	r16, r28
    251a:	07 5a       	subi	r16, 0xA7	; 167
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	1f c0       	rjmp	.+62     	; 0x2570 <LCD_displayCharacter+0x134>
    2532:	fe 01       	movw	r30, r28
    2534:	e9 5a       	subi	r30, 0xA9	; 169
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	88 ec       	ldi	r24, 0xC8	; 200
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
    2540:	fe 01       	movw	r30, r28
    2542:	e9 5a       	subi	r30, 0xA9	; 169
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_displayCharacter+0x10e>
    254e:	fe 01       	movw	r30, r28
    2550:	e9 5a       	subi	r30, 0xA9	; 169
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	de 01       	movw	r26, r28
    255a:	a7 5a       	subi	r26, 0xA7	; 167
    255c:	bf 4f       	sbci	r27, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e7 5a       	subi	r30, 0xA7	; 167
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	11 96       	adiw	r26, 0x01	; 1
    256c:	9c 93       	st	X, r25
    256e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	fe 01       	movw	r30, r28
    2572:	e7 5a       	subi	r30, 0xA7	; 167
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	d1 f6       	brne	.-76     	; 0x2532 <LCD_displayCharacter+0xf6>
    257e:	27 c0       	rjmp	.+78     	; 0x25ce <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	8e 01       	movw	r16, r28
    2582:	07 5a       	subi	r16, 0xA7	; 167
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e5 5a       	subi	r30, 0xA5	; 165
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	f8 01       	movw	r30, r16
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
    25a2:	de 01       	movw	r26, r28
    25a4:	ab 5a       	subi	r26, 0xAB	; 171
    25a6:	bf 4f       	sbci	r27, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	e7 5a       	subi	r30, 0xA7	; 167
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	8d 93       	st	X+, r24
    25b4:	9c 93       	st	X, r25
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 5a       	subi	r30, 0xAB	; 171
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_displayCharacter+0x184>
    25c4:	fe 01       	movw	r30, r28
    25c6:	eb 5a       	subi	r30, 0xAB	; 171
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	62 e0       	ldi	r22, 0x02	; 2
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    25d8:	fe 01       	movw	r30, r28
    25da:	ef 5a       	subi	r30, 0xAF	; 175
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e8       	ldi	r26, 0x80	; 128
    25e4:	bf e3       	ldi	r27, 0x3F	; 63
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	8e 01       	movw	r16, r28
    25f0:	03 5b       	subi	r16, 0xB3	; 179
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	ef 5a       	subi	r30, 0xAF	; 175
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a ef       	ldi	r20, 0xFA	; 250
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261c:	fe 01       	movw	r30, r28
    261e:	e3 5b       	subi	r30, 0xB3	; 179
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	44 f4       	brge	.+16     	; 0x264a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    263a:	fe 01       	movw	r30, r28
    263c:	e5 5b       	subi	r30, 0xB5	; 181
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	64 c0       	rjmp	.+200    	; 0x2712 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    264a:	fe 01       	movw	r30, r28
    264c:	e3 5b       	subi	r30, 0xB3	; 179
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	0c f0       	brlt	.+2      	; 0x266a <LCD_displayCharacter+0x22e>
    2668:	43 c0       	rjmp	.+134    	; 0x26f0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	fe 01       	movw	r30, r28
    266c:	ef 5a       	subi	r30, 0xAF	; 175
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8e 01       	movw	r16, r28
    268a:	05 5b       	subi	r16, 0xB5	; 181
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	1f c0       	rjmp	.+62     	; 0x26e0 <LCD_displayCharacter+0x2a4>
    26a2:	fe 01       	movw	r30, r28
    26a4:	e7 5b       	subi	r30, 0xB7	; 183
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	88 ec       	ldi	r24, 0xC8	; 200
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5b       	subi	r30, 0xB7	; 183
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_displayCharacter+0x27e>
    26be:	fe 01       	movw	r30, r28
    26c0:	e7 5b       	subi	r30, 0xB7	; 183
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	de 01       	movw	r26, r28
    26ca:	a5 5b       	subi	r26, 0xB5	; 181
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e5 5b       	subi	r30, 0xB5	; 181
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	9c 93       	st	X, r25
    26de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	fe 01       	movw	r30, r28
    26e2:	e5 5b       	subi	r30, 0xB5	; 181
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	d1 f6       	brne	.-76     	; 0x26a2 <LCD_displayCharacter+0x266>
    26ee:	27 c0       	rjmp	.+78     	; 0x273e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	8e 01       	movw	r16, r28
    26f2:	05 5b       	subi	r16, 0xB5	; 181
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e3 5b       	subi	r30, 0xB3	; 179
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	f8 01       	movw	r30, r16
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	de 01       	movw	r26, r28
    2714:	a9 5b       	subi	r26, 0xB9	; 185
    2716:	bf 4f       	sbci	r27, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	e5 5b       	subi	r30, 0xB5	; 181
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	8d 93       	st	X+, r24
    2724:	9c 93       	st	X, r25
    2726:	fe 01       	movw	r30, r28
    2728:	e9 5b       	subi	r30, 0xB9	; 185
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x2f4>
    2734:	fe 01       	movw	r30, r28
    2736:	e9 5b       	subi	r30, 0xB9	; 185
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    273e:	fe 01       	movw	r30, r28
    2740:	ed 59       	subi	r30, 0x9D	; 157
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	82 95       	swap	r24
    2748:	8f 70       	andi	r24, 0x0F	; 15
    274a:	98 2f       	mov	r25, r24
    274c:	91 70       	andi	r25, 0x01	; 1
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	63 e0       	ldi	r22, 0x03	; 3
    2752:	49 2f       	mov	r20, r25
    2754:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2758:	fe 01       	movw	r30, r28
    275a:	ed 59       	subi	r30, 0x9D	; 157
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	82 95       	swap	r24
    2762:	86 95       	lsr	r24
    2764:	87 70       	andi	r24, 0x07	; 7
    2766:	98 2f       	mov	r25, r24
    2768:	91 70       	andi	r25, 0x01	; 1
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	64 e0       	ldi	r22, 0x04	; 4
    276e:	49 2f       	mov	r20, r25
    2770:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2774:	fe 01       	movw	r30, r28
    2776:	ed 59       	subi	r30, 0x9D	; 157
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	82 95       	swap	r24
    277e:	86 95       	lsr	r24
    2780:	86 95       	lsr	r24
    2782:	83 70       	andi	r24, 0x03	; 3
    2784:	98 2f       	mov	r25, r24
    2786:	91 70       	andi	r25, 0x01	; 1
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	65 e0       	ldi	r22, 0x05	; 5
    278c:	49 2f       	mov	r20, r25
    278e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2792:	fe 01       	movw	r30, r28
    2794:	ed 59       	subi	r30, 0x9D	; 157
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	98 2f       	mov	r25, r24
    279c:	99 1f       	adc	r25, r25
    279e:	99 27       	eor	r25, r25
    27a0:	99 1f       	adc	r25, r25
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	66 e0       	ldi	r22, 0x06	; 6
    27a6:	49 2f       	mov	r20, r25
    27a8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27ac:	fe 01       	movw	r30, r28
    27ae:	ed 5b       	subi	r30, 0xBD	; 189
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e8       	ldi	r26, 0x80	; 128
    27b8:	bf e3       	ldi	r27, 0x3F	; 63
    27ba:	80 83       	st	Z, r24
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	a2 83       	std	Z+2, r26	; 0x02
    27c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	8e 01       	movw	r16, r28
    27c4:	01 5c       	subi	r16, 0xC1	; 193
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 5b       	subi	r30, 0xBD	; 189
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a ef       	ldi	r20, 0xFA	; 250
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f0:	fe 01       	movw	r30, r28
    27f2:	ff 96       	adiw	r30, 0x3f	; 63
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e af       	std	Y+62, r25	; 0x3e
    2812:	8d af       	std	Y+61, r24	; 0x3d
    2814:	46 c0       	rjmp	.+140    	; 0x28a2 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2816:	fe 01       	movw	r30, r28
    2818:	ff 96       	adiw	r30, 0x3f	; 63
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	64 f5       	brge	.+88     	; 0x288a <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	fe 01       	movw	r30, r28
    2834:	ed 5b       	subi	r30, 0xBD	; 189
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e af       	std	Y+62, r25	; 0x3e
    285e:	8d af       	std	Y+61, r24	; 0x3d
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <LCD_displayCharacter+0x444>
    2862:	88 ec       	ldi	r24, 0xC8	; 200
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c af       	std	Y+60, r25	; 0x3c
    2868:	8b af       	std	Y+59, r24	; 0x3b
    286a:	8b ad       	ldd	r24, Y+59	; 0x3b
    286c:	9c ad       	ldd	r25, Y+60	; 0x3c
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <LCD_displayCharacter+0x432>
    2872:	9c af       	std	Y+60, r25	; 0x3c
    2874:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	8d ad       	ldd	r24, Y+61	; 0x3d
    2878:	9e ad       	ldd	r25, Y+62	; 0x3e
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	9e af       	std	Y+62, r25	; 0x3e
    287e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	8d ad       	ldd	r24, Y+61	; 0x3d
    2882:	9e ad       	ldd	r25, Y+62	; 0x3e
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	69 f7       	brne	.-38     	; 0x2862 <LCD_displayCharacter+0x426>
    2888:	16 c0       	rjmp	.+44     	; 0x28b6 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	fe 01       	movw	r30, r28
    288c:	ff 96       	adiw	r30, 0x3f	; 63
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e af       	std	Y+62, r25	; 0x3e
    28a0:	8d af       	std	Y+61, r24	; 0x3d
    28a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a6:	9a af       	std	Y+58, r25	; 0x3a
    28a8:	89 af       	std	Y+57, r24	; 0x39
    28aa:	89 ad       	ldd	r24, Y+57	; 0x39
    28ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_displayCharacter+0x472>
    28b2:	9a af       	std	Y+58, r25	; 0x3a
    28b4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	62 e0       	ldi	r22, 0x02	; 2
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e8       	ldi	r26, 0x80	; 128
    28c6:	bf e3       	ldi	r27, 0x3F	; 63
    28c8:	8d ab       	std	Y+53, r24	; 0x35
    28ca:	9e ab       	std	Y+54, r25	; 0x36
    28cc:	af ab       	std	Y+55, r26	; 0x37
    28ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	6d a9       	ldd	r22, Y+53	; 0x35
    28d2:	7e a9       	ldd	r23, Y+54	; 0x36
    28d4:	8f a9       	ldd	r24, Y+55	; 0x37
    28d6:	98 ad       	ldd	r25, Y+56	; 0x38
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	89 ab       	std	Y+49, r24	; 0x31
    28ea:	9a ab       	std	Y+50, r25	; 0x32
    28ec:	ab ab       	std	Y+51, r26	; 0x33
    28ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2912:	69 a9       	ldd	r22, Y+49	; 0x31
    2914:	7a a9       	ldd	r23, Y+50	; 0x32
    2916:	8b a9       	ldd	r24, Y+51	; 0x33
    2918:	9c a9       	ldd	r25, Y+52	; 0x34
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	6d a9       	ldd	r22, Y+53	; 0x35
    292c:	7e a9       	ldd	r23, Y+54	; 0x36
    292e:	8f a9       	ldd	r24, Y+55	; 0x37
    2930:	98 ad       	ldd	r25, Y+56	; 0x38
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	98 ab       	std	Y+48, r25	; 0x30
    2950:	8f a7       	std	Y+47, r24	; 0x2f
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <LCD_displayCharacter+0x536>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e a7       	std	Y+46, r25	; 0x2e
    295a:	8d a7       	std	Y+45, r24	; 0x2d
    295c:	8d a5       	ldd	r24, Y+45	; 0x2d
    295e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_displayCharacter+0x524>
    2964:	9e a7       	std	Y+46, r25	; 0x2e
    2966:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8f a5       	ldd	r24, Y+47	; 0x2f
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8f a5       	ldd	r24, Y+47	; 0x2f
    2974:	98 a9       	ldd	r25, Y+48	; 0x30
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <LCD_displayCharacter+0x518>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	69 a9       	ldd	r22, Y+49	; 0x31
    297e:	7a a9       	ldd	r23, Y+50	; 0x32
    2980:	8b a9       	ldd	r24, Y+51	; 0x33
    2982:	9c a9       	ldd	r25, Y+52	; 0x34
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	98 ab       	std	Y+48, r25	; 0x30
    298e:	8f a7       	std	Y+47, r24	; 0x2f
    2990:	8f a5       	ldd	r24, Y+47	; 0x2f
    2992:	98 a9       	ldd	r25, Y+48	; 0x30
    2994:	9c a7       	std	Y+44, r25	; 0x2c
    2996:	8b a7       	std	Y+43, r24	; 0x2b
    2998:	8b a5       	ldd	r24, Y+43	; 0x2b
    299a:	9c a5       	ldd	r25, Y+44	; 0x2c
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_displayCharacter+0x560>
    29a0:	9c a7       	std	Y+44, r25	; 0x2c
    29a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e8       	ldi	r26, 0x80	; 128
    29b4:	bf e3       	ldi	r27, 0x3F	; 63
    29b6:	8f a3       	std	Y+39, r24	; 0x27
    29b8:	98 a7       	std	Y+40, r25	; 0x28
    29ba:	a9 a7       	std	Y+41, r26	; 0x29
    29bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6f a1       	ldd	r22, Y+39	; 0x27
    29c0:	78 a5       	ldd	r23, Y+40	; 0x28
    29c2:	89 a5       	ldd	r24, Y+41	; 0x29
    29c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8b a3       	std	Y+35, r24	; 0x23
    29d8:	9c a3       	std	Y+36, r25	; 0x24
    29da:	ad a3       	std	Y+37, r26	; 0x25
    29dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2a00:	6b a1       	ldd	r22, Y+35	; 0x23
    2a02:	7c a1       	ldd	r23, Y+36	; 0x24
    2a04:	8d a1       	ldd	r24, Y+37	; 0x25
    2a06:	9e a1       	ldd	r25, Y+38	; 0x26
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <LCD_displayCharacter+0x624>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	98 a3       	std	Y+32, r25	; 0x20
    2a48:	8f 8f       	std	Y+31, r24	; 0x1f
    2a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a4c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <LCD_displayCharacter+0x612>
    2a52:	98 a3       	std	Y+32, r25	; 0x20
    2a54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	89 a1       	ldd	r24, Y+33	; 0x21
    2a58:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9a a3       	std	Y+34, r25	; 0x22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	9a a1       	ldd	r25, Y+34	; 0x22
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <LCD_displayCharacter+0x606>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9a a3       	std	Y+34, r25	; 0x22
    2a7c:	89 a3       	std	Y+33, r24	; 0x21
    2a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a80:	9a a1       	ldd	r25, Y+34	; 0x22
    2a82:	9e 8f       	std	Y+30, r25	; 0x1e
    2a84:	8d 8f       	std	Y+29, r24	; 0x1d
    2a86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <LCD_displayCharacter+0x64e>
    2a8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2a92:	fe 01       	movw	r30, r28
    2a94:	ed 59       	subi	r30, 0x9D	; 157
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	98 2f       	mov	r25, r24
    2a9c:	91 70       	andi	r25, 0x01	; 1
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	63 e0       	ldi	r22, 0x03	; 3
    2aa2:	49 2f       	mov	r20, r25
    2aa4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ed 59       	subi	r30, 0x9D	; 157
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	86 95       	lsr	r24
    2ab2:	98 2f       	mov	r25, r24
    2ab4:	91 70       	andi	r25, 0x01	; 1
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	64 e0       	ldi	r22, 0x04	; 4
    2aba:	49 2f       	mov	r20, r25
    2abc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ed 59       	subi	r30, 0x9D	; 157
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	86 95       	lsr	r24
    2aca:	86 95       	lsr	r24
    2acc:	98 2f       	mov	r25, r24
    2ace:	91 70       	andi	r25, 0x01	; 1
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	65 e0       	ldi	r22, 0x05	; 5
    2ad4:	49 2f       	mov	r20, r25
    2ad6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2ada:	fe 01       	movw	r30, r28
    2adc:	ed 59       	subi	r30, 0x9D	; 157
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	86 95       	lsr	r24
    2ae4:	86 95       	lsr	r24
    2ae6:	86 95       	lsr	r24
    2ae8:	98 2f       	mov	r25, r24
    2aea:	91 70       	andi	r25, 0x01	; 1
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	66 e0       	ldi	r22, 0x06	; 6
    2af0:	49 2f       	mov	r20, r25
    2af2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e8       	ldi	r26, 0x80	; 128
    2afc:	bf e3       	ldi	r27, 0x3F	; 63
    2afe:	89 8f       	std	Y+25, r24	; 0x19
    2b00:	9a 8f       	std	Y+26, r25	; 0x1a
    2b02:	ab 8f       	std	Y+27, r26	; 0x1b
    2b04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	69 8d       	ldd	r22, Y+25	; 0x19
    2b08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a ef       	ldi	r20, 0xFA	; 250
    2b14:	54 e4       	ldi	r21, 0x44	; 68
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8d 8b       	std	Y+21, r24	; 0x15
    2b20:	9e 8b       	std	Y+22, r25	; 0x16
    2b22:	af 8b       	std	Y+23, r26	; 0x17
    2b24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	69 8d       	ldd	r22, Y+25	; 0x19
    2b62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	9c 8b       	std	Y+20, r25	; 0x14
    2b86:	8b 8b       	std	Y+19, r24	; 0x13
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <LCD_displayCharacter+0x76c>
    2b8a:	88 ec       	ldi	r24, 0xC8	; 200
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9a 8b       	std	Y+18, r25	; 0x12
    2b90:	89 8b       	std	Y+17, r24	; 0x11
    2b92:	89 89       	ldd	r24, Y+17	; 0x11
    2b94:	9a 89       	ldd	r25, Y+18	; 0x12
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_displayCharacter+0x75a>
    2b9a:	9a 8b       	std	Y+18, r25	; 0x12
    2b9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9c 8b       	std	Y+20, r25	; 0x14
    2ba6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    2baa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <LCD_displayCharacter+0x74e>
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bca:	98 8b       	std	Y+16, r25	; 0x10
    2bcc:	8f 87       	std	Y+15, r24	; 0x0f
    2bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd0:	98 89       	ldd	r25, Y+16	; 0x10
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_displayCharacter+0x796>
    2bd6:	98 8b       	std	Y+16, r25	; 0x10
    2bd8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	62 e0       	ldi	r22, 0x02	; 2
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e8       	ldi	r26, 0x80	; 128
    2bea:	bf e3       	ldi	r27, 0x3F	; 63
    2bec:	8b 87       	std	Y+11, r24	; 0x0b
    2bee:	9c 87       	std	Y+12, r25	; 0x0c
    2bf0:	ad 87       	std	Y+13, r26	; 0x0d
    2bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a ef       	ldi	r20, 0xFA	; 250
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8f 83       	std	Y+7, r24	; 0x07
    2c0e:	98 87       	std	Y+8, r25	; 0x08
    2c10:	a9 87       	std	Y+9, r26	; 0x09
    2c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <LCD_displayCharacter+0x85a>
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_displayCharacter+0x848>
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <LCD_displayCharacter+0x83c>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <LCD_displayCharacter+0x884>
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2cc8:	cd 59       	subi	r28, 0x9D	; 157
    2cca:	df 4f       	sbci	r29, 0xFF	; 255
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	08 95       	ret

00002ce0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <LCD_displayString+0x6>
    2ce6:	0f 92       	push	r0
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	9b 83       	std	Y+3, r25	; 0x03
    2cee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cf0:	19 82       	std	Y+1, r1	; 0x01
    2cf2:	0e c0       	rjmp	.+28     	; 0x2d10 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_displayCharacter>
		i++;
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	e2 0f       	add	r30, r18
    2d1e:	f3 1f       	adc	r31, r19
    2d20:	80 81       	ld	r24, Z
    2d22:	88 23       	and	r24, r24
    2d24:	39 f7       	brne	.-50     	; 0x2cf4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <LCD_moveCursor+0x6>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <LCD_moveCursor+0x8>
    2d3a:	0f 92       	push	r0
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	8a 83       	std	Y+2, r24	; 0x02
    2d42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3d 83       	std	Y+5, r19	; 0x05
    2d4c:	2c 83       	std	Y+4, r18	; 0x04
    2d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d50:	9d 81       	ldd	r25, Y+5	; 0x05
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	91 05       	cpc	r25, r1
    2d56:	c1 f0       	breq	.+48     	; 0x2d88 <LCD_moveCursor+0x56>
    2d58:	2c 81       	ldd	r18, Y+4	; 0x04
    2d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d5c:	22 30       	cpi	r18, 0x02	; 2
    2d5e:	31 05       	cpc	r19, r1
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <LCD_moveCursor+0x3a>
    2d62:	8c 81       	ldd	r24, Y+4	; 0x04
    2d64:	9d 81       	ldd	r25, Y+5	; 0x05
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	61 f0       	breq	.+24     	; 0x2d82 <LCD_moveCursor+0x50>
    2d6a:	19 c0       	rjmp	.+50     	; 0x2d9e <LCD_moveCursor+0x6c>
    2d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d70:	22 30       	cpi	r18, 0x02	; 2
    2d72:	31 05       	cpc	r19, r1
    2d74:	69 f0       	breq	.+26     	; 0x2d90 <LCD_moveCursor+0x5e>
    2d76:	8c 81       	ldd	r24, Y+4	; 0x04
    2d78:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7a:	83 30       	cpi	r24, 0x03	; 3
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	61 f0       	breq	.+24     	; 0x2d98 <LCD_moveCursor+0x66>
    2d80:	0e c0       	rjmp	.+28     	; 0x2d9e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	0b c0       	rjmp	.+22     	; 0x2d9e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	80 5c       	subi	r24, 0xC0	; 192
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	07 c0       	rjmp	.+14     	; 0x2d9e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	80 5f       	subi	r24, 0xF0	; 240
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	03 c0       	rjmp	.+6      	; 0x2d9e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	80 5b       	subi	r24, 0xB0	; 176
    2d9c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	80 68       	ori	r24, 0x80	; 128
    2da2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <LCD_displayStringRowColumn+0x6>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <LCD_displayStringRowColumn+0x8>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	6a 83       	std	Y+2, r22	; 0x02
    2dc6:	5c 83       	std	Y+4, r21	; 0x04
    2dc8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	6a 81       	ldd	r22, Y+2	; 0x02
    2dce:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_displayString>
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	62 97       	sbiw	r28, 0x12	; 18
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	9a 8b       	std	Y+18, r25	; 0x12
    2dfe:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e00:	89 89       	ldd	r24, Y+17	; 0x11
    2e02:	9a 89       	ldd	r25, Y+18	; 0x12
    2e04:	9e 01       	movw	r18, r28
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	4a e0       	ldi	r20, 0x0A	; 10
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	0e 94 a8 1a 	call	0x3550	; 0x3550 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <LCD_displayString>
}
    2e1c:	62 96       	adiw	r28, 0x12	; 18
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_sendCommand>
}
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <ErrorMessage_1Min>:
 * Set/Clear Freeze which used to stop the mcu until Timer End.
 *
 * input: void
 * output: void
 * */
void ErrorMessage_1Min(void){
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
    2e4a:	80 91 03 01 	lds	r24, 0x0103
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	80 93 03 01 	sts	0x0103, r24
	freeze=1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 93 f8 00 	sts	0x00F8, r24
	if(count ==14){
    2e5a:	80 91 03 01 	lds	r24, 0x0103
    2e5e:	8e 30       	cpi	r24, 0x0E	; 14
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <ErrorMessage_1Min+0x2c>
		freeze=0;
    2e62:	10 92 f8 00 	sts	0x00F8, r1
		count=0;
    2e66:	10 92 03 01 	sts	0x0103, r1
		Timer1_deInit();
    2e6a:	0e 94 45 09 	call	0x128a	; 0x128a <Timer1_deInit>
	}
}
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <PrintScreen1_LCD>:
 * ==========================================
 * input: void
 * output: void
 * */

void PrintScreen1_LCD(void){
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2e7c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
    2e80:	20 e6       	ldi	r18, 0x60	; 96
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	a9 01       	movw	r20, r18
    2e8a:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	0e 94 99 16 	call	0x2d32	; 0x2d32 <LCD_moveCursor>
}
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <PrintScreen2_LCD>:
 * ==========================================
 * input: void
 * output: void
 * */

void PrintScreen2_LCD(void){
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,0,"Plz re-enter pass:");
    2ea4:	20 e7       	ldi	r18, 0x70	; 112
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	a9 01       	movw	r20, r18
    2eae:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Same Pass:");
    2eb2:	23 e8       	ldi	r18, 0x83	; 131
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	a9 01       	movw	r20, r18
    2ebc:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <ReadPassword>:
 *
 * input: Pointer for Array where saved
 * output: void
 * */

void ReadPassword(uint8 Ptr[]){
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	61 97       	sbiw	r28, 0x11	; 17
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	99 8b       	std	Y+17, r25	; 0x11
    2edc:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 counter=0;counter<5;counter++){
    2ede:	1f 86       	std	Y+15, r1	; 0x0f
    2ee0:	90 c0       	rjmp	.+288    	; 0x3002 <ReadPassword+0x13c>
			key=KEYPAD_getPressedKey();
    2ee2:	0e 94 86 0b 	call	0x170c	; 0x170c <KEYPAD_getPressedKey>
    2ee6:	80 93 07 01 	sts	0x0107, r24
			if((key <= 9) && (key >= 0)){
    2eea:	80 91 07 01 	lds	r24, 0x0107
    2eee:	8a 30       	cpi	r24, 0x0A	; 10
    2ef0:	08 f0       	brcs	.+2      	; 0x2ef4 <ReadPassword+0x2e>
    2ef2:	81 c0       	rjmp	.+258    	; 0x2ff6 <ReadPassword+0x130>
				Ptr[counter]=key;
    2ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	88 89       	ldd	r24, Y+16	; 0x10
    2efc:	99 89       	ldd	r25, Y+17	; 0x11
    2efe:	fc 01       	movw	r30, r24
    2f00:	e2 0f       	add	r30, r18
    2f02:	f3 1f       	adc	r31, r19
    2f04:	80 91 07 01 	lds	r24, 0x0107
    2f08:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    2f0a:	8a e2       	ldi	r24, 0x2A	; 42
    2f0c:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_displayCharacter>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	aa e7       	ldi	r26, 0x7A	; 122
    2f16:	b3 e4       	ldi	r27, 0x43	; 67
    2f18:	8b 87       	std	Y+11, r24	; 0x0b
    2f1a:	9c 87       	std	Y+12, r25	; 0x0c
    2f1c:	ad 87       	std	Y+13, r26	; 0x0d
    2f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8f 83       	std	Y+7, r24	; 0x07
    2f3a:	98 87       	std	Y+8, r25	; 0x08
    2f3c:	a9 87       	std	Y+9, r26	; 0x09
    2f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <ReadPassword+0x9c>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <ReadPassword+0x11a>
	else if (__tmp > 65535)
    2f62:	6f 81       	ldd	r22, Y+7	; 0x07
    2f64:	78 85       	ldd	r23, Y+8	; 0x08
    2f66:	89 85       	ldd	r24, Y+9	; 0x09
    2f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <ReadPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <ReadPassword+0xfc>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <ReadPassword+0xea>
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <ReadPassword+0xde>
    2fca:	18 c0       	rjmp	.+48     	; 0x2ffc <ReadPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <ReadPassword+0x126>
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <ReadPassword+0x136>
				_delay_ms(250);
			}
			else{
				counter--;
    2ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff8:	81 50       	subi	r24, 0x01	; 1
    2ffa:	8f 87       	std	Y+15, r24	; 0x0f
 * input: Pointer for Array where saved
 * output: void
 * */

void ReadPassword(uint8 Ptr[]){
	for(uint8 counter=0;counter<5;counter++){
    2ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	8f 87       	std	Y+15, r24	; 0x0f
    3002:	8f 85       	ldd	r24, Y+15	; 0x0f
    3004:	85 30       	cpi	r24, 0x05	; 5
    3006:	08 f4       	brcc	.+2      	; 0x300a <ReadPassword+0x144>
    3008:	6c cf       	rjmp	.-296    	; 0x2ee2 <ReadPassword+0x1c>
			}
			else{
				counter--;
			}
		}
}
    300a:	61 96       	adiw	r28, 0x11	; 17
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <SendPassword>:
 * Description: Function Used to Send Password by UART
 *
 * input: Pointer for Array where saved
 * output: void
 * */
void SendPassword(uint8 Ptr[]){
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	00 d0       	rcall	.+0      	; 0x3022 <SendPassword+0x6>
    3022:	0f 92       	push	r0
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	9b 83       	std	Y+3, r25	; 0x03
    302a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 counter=0;counter<5;counter++){
    302c:	19 82       	std	Y+1, r1	; 0x01
    302e:	0e c0       	rjmp	.+28     	; 0x304c <SendPassword+0x30>
			UART_sendByte(Ptr[counter]);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	80 81       	ld	r24, Z
    3042:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
 *
 * input: Pointer for Array where saved
 * output: void
 * */
void SendPassword(uint8 Ptr[]){
	for(uint8 counter=0;counter<5;counter++){
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	8f 5f       	subi	r24, 0xFF	; 255
    304a:	89 83       	std	Y+1, r24	; 0x01
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	85 30       	cpi	r24, 0x05	; 5
    3050:	78 f3       	brcs	.-34     	; 0x3030 <SendPassword+0x14>
			UART_sendByte(Ptr[counter]);
		}
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <WaitEnterKey>:
 *
 * input: void
 * output: void
 * */

void WaitEnterKey(){
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <WaitEnterKey+0x12>
	while(key!=13){
			key=KEYPAD_getPressedKey();
    3068:	0e 94 86 0b 	call	0x170c	; 0x170c <KEYPAD_getPressedKey>
    306c:	80 93 07 01 	sts	0x0107, r24
 * input: void
 * output: void
 * */

void WaitEnterKey(){
	while(key!=13){
    3070:	80 91 07 01 	lds	r24, 0x0107
    3074:	8d 30       	cpi	r24, 0x0D	; 13
    3076:	c1 f7       	brne	.-16     	; 0x3068 <WaitEnterKey+0xa>
			key=KEYPAD_getPressedKey();
	}
}
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <CheckPassword>:
 * 4)Send Password To Contoller
 *
 * input: void
 * output: void
 * */
void CheckPassword(){
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	PrintScreen1_LCD();
    3086:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <PrintScreen1_LCD>
	ReadPassword(PasswordConfirm);
    308a:	8e ef       	ldi	r24, 0xFE	; 254
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <ReadPassword>
	WaitEnterKey();
    3092:	0e 94 2f 18 	call	0x305e	; 0x305e <WaitEnterKey>
	SendPassword(PasswordConfirm);
    3096:	8e ef       	ldi	r24, 0xFE	; 254
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 0e 18 	call	0x301c	; 0x301c <SendPassword>
}
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <CreatingPassword>:
 *
 * input: void
 * output: void
 * */

void CreatingPassword(){
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	2e 97       	sbiw	r28, 0x0e	; 14
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
	PrintScreen1_LCD();
    30b8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <PrintScreen1_LCD>
	ReadPassword(Password);
    30bc:	89 ef       	ldi	r24, 0xF9	; 249
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <ReadPassword>
	WaitEnterKey();
    30c4:	0e 94 2f 18 	call	0x305e	; 0x305e <WaitEnterKey>

	PrintScreen2_LCD();
    30c8:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <PrintScreen2_LCD>
	ReadPassword(PasswordConfirm);
    30cc:	8e ef       	ldi	r24, 0xFE	; 254
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <ReadPassword>
	WaitEnterKey();
    30d4:	0e 94 2f 18 	call	0x305e	; 0x305e <WaitEnterKey>

	SendPassword(Password);
    30d8:	89 ef       	ldi	r24, 0xF9	; 249
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 0e 18 	call	0x301c	; 0x301c <SendPassword>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	a0 e2       	ldi	r26, 0x20	; 32
    30e6:	b1 e4       	ldi	r27, 0x41	; 65
    30e8:	8b 87       	std	Y+11, r24	; 0x0b
    30ea:	9c 87       	std	Y+12, r25	; 0x0c
    30ec:	ad 87       	std	Y+13, r26	; 0x0d
    30ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a ef       	ldi	r20, 0xFA	; 250
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8f 83       	std	Y+7, r24	; 0x07
    310a:	98 87       	std	Y+8, r25	; 0x08
    310c:	a9 87       	std	Y+9, r26	; 0x09
    310e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3110:	6f 81       	ldd	r22, Y+7	; 0x07
    3112:	78 85       	ldd	r23, Y+8	; 0x08
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	9a 85       	ldd	r25, Y+10	; 0x0a
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e8       	ldi	r20, 0x80	; 128
    311e:	5f e3       	ldi	r21, 0x3F	; 63
    3120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3124:	88 23       	and	r24, r24
    3126:	2c f4       	brge	.+10     	; 0x3132 <CreatingPassword+0x8e>
		__ticks = 1;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	3f c0       	rjmp	.+126    	; 0x31b0 <CreatingPassword+0x10c>
	else if (__tmp > 65535)
    3132:	6f 81       	ldd	r22, Y+7	; 0x07
    3134:	78 85       	ldd	r23, Y+8	; 0x08
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	3f ef       	ldi	r19, 0xFF	; 255
    313e:	4f e7       	ldi	r20, 0x7F	; 127
    3140:	57 e4       	ldi	r21, 0x47	; 71
    3142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3146:	18 16       	cp	r1, r24
    3148:	4c f5       	brge	.+82     	; 0x319c <CreatingPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314a:	6b 85       	ldd	r22, Y+11	; 0x0b
    314c:	7c 85       	ldd	r23, Y+12	; 0x0c
    314e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3150:	9e 85       	ldd	r25, Y+14	; 0x0e
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e2       	ldi	r20, 0x20	; 32
    3158:	51 e4       	ldi	r21, 0x41	; 65
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	bc 01       	movw	r22, r24
    3164:	cd 01       	movw	r24, r26
    3166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	9e 83       	std	Y+6, r25	; 0x06
    3170:	8d 83       	std	Y+5, r24	; 0x05
    3172:	0f c0       	rjmp	.+30     	; 0x3192 <CreatingPassword+0xee>
    3174:	88 ec       	ldi	r24, 0xC8	; 200
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	8b 83       	std	Y+3, r24	; 0x03
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	9c 81       	ldd	r25, Y+4	; 0x04
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <CreatingPassword+0xdc>
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	69 f7       	brne	.-38     	; 0x3174 <CreatingPassword+0xd0>
    319a:	14 c0       	rjmp	.+40     	; 0x31c4 <CreatingPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	9e 83       	std	Y+6, r25	; 0x06
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <CreatingPassword+0x118>
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	SendPassword(PasswordConfirm);
    31c4:	8e ef       	ldi	r24, 0xFE	; 254
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 0e 18 	call	0x301c	; 0x301c <SendPassword>
}
    31cc:	2e 96       	adiw	r28, 0x0e	; 14
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <UnLockingDoor_15S>:
 *
 * input: void
 * output: void
 * */

void UnLockingDoor_15S(){
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
    31e6:	80 91 04 01 	lds	r24, 0x0104
    31ea:	8f 5f       	subi	r24, 0xFF	; 255
    31ec:	80 93 04 01 	sts	0x0104, r24
	if(count==14){
    31f0:	80 91 04 01 	lds	r24, 0x0104
    31f4:	8e 30       	cpi	r24, 0x0E	; 14
    31f6:	31 f4       	brne	.+12     	; 0x3204 <UnLockingDoor_15S+0x26>
	count=0;
    31f8:	10 92 04 01 	sts	0x0104, r1
	freeze=0;
    31fc:	10 92 f8 00 	sts	0x00F8, r1
	Timer1_deInit();
    3200:	0e 94 45 09 	call	0x128a	; 0x128a <Timer1_deInit>
	}
}
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <Holding_3S>:
 *
 * input: void
 * output: void
 * */

void Holding_3S(){
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
    3212:	80 91 05 01 	lds	r24, 0x0105
    3216:	8f 5f       	subi	r24, 0xFF	; 255
    3218:	80 93 05 01 	sts	0x0105, r24
	if(count==2){
    321c:	80 91 05 01 	lds	r24, 0x0105
    3220:	82 30       	cpi	r24, 0x02	; 2
    3222:	31 f4       	brne	.+12     	; 0x3230 <Holding_3S+0x26>
		count=0;
    3224:	10 92 05 01 	sts	0x0105, r1
		freeze=0;
    3228:	10 92 f8 00 	sts	0x00F8, r1
		Timer1_deInit();
    322c:	0e 94 45 09 	call	0x128a	; 0x128a <Timer1_deInit>
	}
}
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <PollingUntilFreezeEnd>:
 * 2)wait until Callback function Clear Freeze
 *
 * input: void
 * output: void
 * */
void PollingUntilFreezeEnd(){
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
	freeze=1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	80 93 f8 00 	sts	0x00F8, r24
	while(freeze);
    3244:	80 91 f8 00 	lds	r24, 0x00F8
    3248:	88 23       	and	r24, r24
    324a:	e1 f7       	brne	.-8      	; 0x3244 <PollingUntilFreezeEnd+0xe>
}
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <OpeningDoor>:
 * prepare the timer and LCD to do the 3 stages of opening the door
 *
 * input: void
 * output: void
 * */
void OpeningDoor(){
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    325a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
	Timer1_init(&Config);
    325e:	88 ee       	ldi	r24, 0xE8	; 232
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer1_init>
	Timer1_setCallBack(&UnLockingDoor_15S);
    3266:	8f ee       	ldi	r24, 0xEF	; 239
    3268:	98 e1       	ldi	r25, 0x18	; 24
    326a:	0e 94 56 09 	call	0x12ac	; 0x12ac <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Door is Unlocking");
    326e:	2e e8       	ldi	r18, 0x8E	; 142
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	60 e0       	ldi	r22, 0x00	; 0
    3276:	a9 01       	movw	r20, r18
    3278:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	PollingUntilFreezeEnd();
    327c:	0e 94 1b 19 	call	0x3236	; 0x3236 <PollingUntilFreezeEnd>

	LCD_clearScreen();
    3280:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
	Timer1_init(&Config);
    3284:	88 ee       	ldi	r24, 0xE8	; 232
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer1_init>
	Timer1_setCallBack(&Holding_3S);
    328c:	85 e0       	ldi	r24, 0x05	; 5
    328e:	99 e1       	ldi	r25, 0x19	; 25
    3290:	0e 94 56 09 	call	0x12ac	; 0x12ac <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Holding");
    3294:	20 ea       	ldi	r18, 0xA0	; 160
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	a9 01       	movw	r20, r18
    329e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	PollingUntilFreezeEnd();
    32a2:	0e 94 1b 19 	call	0x3236	; 0x3236 <PollingUntilFreezeEnd>

	LCD_clearScreen();
    32a6:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
	Timer1_init(&Config);
    32aa:	88 ee       	ldi	r24, 0xE8	; 232
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer1_init>
	Timer1_setCallBack(&UnLockingDoor_15S);
    32b2:	8f ee       	ldi	r24, 0xEF	; 239
    32b4:	98 e1       	ldi	r25, 0x18	; 24
    32b6:	0e 94 56 09 	call	0x12ac	; 0x12ac <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Door is Locking");
    32ba:	28 ea       	ldi	r18, 0xA8	; 168
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	a9 01       	movw	r20, r18
    32c4:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	PollingUntilFreezeEnd();
    32c8:	0e 94 1b 19 	call	0x3236	; 0x3236 <PollingUntilFreezeEnd>
}
    32cc:	cf 91       	pop	r28
    32ce:	df 91       	pop	r29
    32d0:	08 95       	ret

000032d2 <DisplayError_60s>:
 *
 * input: void
 * output: void
 * */

void DisplayError_60s(){
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
    32da:	80 91 06 01 	lds	r24, 0x0106
    32de:	8f 5f       	subi	r24, 0xFF	; 255
    32e0:	80 93 06 01 	sts	0x0106, r24
	if(count==59){
    32e4:	80 91 06 01 	lds	r24, 0x0106
    32e8:	8b 33       	cpi	r24, 0x3B	; 59
    32ea:	31 f4       	brne	.+12     	; 0x32f8 <DisplayError_60s+0x26>
		count=0;
    32ec:	10 92 06 01 	sts	0x0106, r1
		freeze=0;
    32f0:	10 92 f8 00 	sts	0x00F8, r1
		Timer1_deInit();
    32f4:	0e 94 45 09 	call	0x128a	; 0x128a <Timer1_deInit>
	}
}
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	08 95       	ret

000032fe <DisPlayErrorMessageAndDisplayInput>:




void DisPlayErrorMessageAndDisplayInput(){
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    3306:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
	Timer1_init(&Config);
    330a:	88 ee       	ldi	r24, 0xE8	; 232
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer1_init>
	Timer1_setCallBack(&DisplayError_60s);
    3312:	89 e6       	ldi	r24, 0x69	; 105
    3314:	99 e1       	ldi	r25, 0x19	; 25
    3316:	0e 94 56 09 	call	0x12ac	; 0x12ac <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"ERROR!!");
    331a:	28 eb       	ldi	r18, 0xB8	; 184
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	a9 01       	movw	r20, r18
    3324:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
	PollingUntilFreezeEnd();
    3328:	0e 94 1b 19 	call	0x3236	; 0x3236 <PollingUntilFreezeEnd>
}
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <main>:



int main(){
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	64 97       	sbiw	r28, 0x14	; 20
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7); // Enable Interrupts
    3346:	af e5       	ldi	r26, 0x5F	; 95
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	ef e5       	ldi	r30, 0x5F	; 95
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	80 68       	ori	r24, 0x80	; 128
    3352:	8c 93       	st	X, r24

	UART_ConfigType UartConfig={Eight_Bit,Disabled,One_Bit,9600};
    3354:	ce 01       	movw	r24, r28
    3356:	09 96       	adiw	r24, 0x09	; 9
    3358:	99 8b       	std	Y+17, r25	; 0x11
    335a:	88 8b       	std	Y+16, r24	; 0x10
    335c:	ee ee       	ldi	r30, 0xEE	; 238
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	fb 8b       	std	Y+19, r31	; 0x13
    3362:	ea 8b       	std	Y+18, r30	; 0x12
    3364:	f7 e0       	ldi	r31, 0x07	; 7
    3366:	fc 8b       	std	Y+20, r31	; 0x14
    3368:	ea 89       	ldd	r30, Y+18	; 0x12
    336a:	fb 89       	ldd	r31, Y+19	; 0x13
    336c:	00 80       	ld	r0, Z
    336e:	8a 89       	ldd	r24, Y+18	; 0x12
    3370:	9b 89       	ldd	r25, Y+19	; 0x13
    3372:	01 96       	adiw	r24, 0x01	; 1
    3374:	9b 8b       	std	Y+19, r25	; 0x13
    3376:	8a 8b       	std	Y+18, r24	; 0x12
    3378:	e8 89       	ldd	r30, Y+16	; 0x10
    337a:	f9 89       	ldd	r31, Y+17	; 0x11
    337c:	00 82       	st	Z, r0
    337e:	88 89       	ldd	r24, Y+16	; 0x10
    3380:	99 89       	ldd	r25, Y+17	; 0x11
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	99 8b       	std	Y+17, r25	; 0x11
    3386:	88 8b       	std	Y+16, r24	; 0x10
    3388:	9c 89       	ldd	r25, Y+20	; 0x14
    338a:	91 50       	subi	r25, 0x01	; 1
    338c:	9c 8b       	std	Y+20, r25	; 0x14
    338e:	ec 89       	ldd	r30, Y+20	; 0x14
    3390:	ee 23       	and	r30, r30
    3392:	51 f7       	brne	.-44     	; 0x3368 <main+0x36>


	UART_init(&UartConfig);
    3394:	ce 01       	movw	r24, r28
    3396:	09 96       	adiw	r24, 0x09	; 9
    3398:	0e 94 d6 09 	call	0x13ac	; 0x13ac <UART_init>
	LCD_init();
    339c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <LCD_init>


	while(UART_recieveByte()!=CONTROL_READY);	// waiting Control end his part
    33a0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    33a4:	80 34       	cpi	r24, 0x40	; 64
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <main+0x6e>
	while(1){

		UART_sendByte(REG_PASSWORD);   // check if there is Password in EEPROM or not
    33a8:	80 e1       	ldi	r24, 0x10	; 16
    33aa:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
 		uint8 order=UART_recieveByte();	// waiting the answer of Control MC
    33ae:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    33b2:	88 87       	std	Y+8, r24	; 0x08


		if(order==PASSWORD_COMFIRM){			// if there is a Password
    33b4:	88 85       	ldd	r24, Y+8	; 0x08
    33b6:	85 31       	cpi	r24, 0x15	; 21
    33b8:	09 f0       	breq	.+2      	; 0x33bc <main+0x8a>
    33ba:	65 c0       	rjmp	.+202    	; 0x3486 <main+0x154>
			uint8 key2='a';
    33bc:	81 e6       	ldi	r24, 0x61	; 97
    33be:	8f 83       	std	Y+7, r24	; 0x07
			LCD_clearScreen();
    33c0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"+  : Open Door");
    33c4:	20 ec       	ldi	r18, 0xC0	; 192
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	a9 01       	movw	r20, r18
    33ce:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"-  : Change Pass");
    33d2:	2f ec       	ldi	r18, 0xCF	; 207
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	a9 01       	movw	r20, r18
    33dc:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayStringRowColumn>
    33e0:	03 c0       	rjmp	.+6      	; 0x33e8 <main+0xb6>
			while(key2!='+' && key2!='-'){			//	Waiting until user Press the Correct Key
				key2=KEYPAD_getPressedKey();
    33e2:	0e 94 86 0b 	call	0x170c	; 0x170c <KEYPAD_getPressedKey>
    33e6:	8f 83       	std	Y+7, r24	; 0x07
		if(order==PASSWORD_COMFIRM){			// if there is a Password
			uint8 key2='a';
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"+  : Open Door");
			LCD_displayStringRowColumn(1,0,"-  : Change Pass");
			while(key2!='+' && key2!='-'){			//	Waiting until user Press the Correct Key
    33e8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ea:	8b 32       	cpi	r24, 0x2B	; 43
    33ec:	19 f0       	breq	.+6      	; 0x33f4 <main+0xc2>
    33ee:	8f 81       	ldd	r24, Y+7	; 0x07
    33f0:	8d 32       	cpi	r24, 0x2D	; 45
    33f2:	b9 f7       	brne	.-18     	; 0x33e2 <main+0xb0>

			/*
			 * here we will Get Password and send to controller to check it
			 * looping until the 3 tries end or the user enter the right password
			 * */
			uint8 try=3;
    33f4:	83 e0       	ldi	r24, 0x03	; 3
    33f6:	8e 83       	std	Y+6, r24	; 0x06
			uint8 answer;
			do{
			try--;
    33f8:	8e 81       	ldd	r24, Y+6	; 0x06
    33fa:	81 50       	subi	r24, 0x01	; 1
    33fc:	8e 83       	std	Y+6, r24	; 0x06
			UART_sendByte(CHECKPASSWORD);
    33fe:	80 e2       	ldi	r24, 0x20	; 32
    3400:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
			CheckPassword();
    3404:	0e 94 3f 18 	call	0x307e	; 0x307e <CheckPassword>
			answer=UART_recieveByte();
    3408:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    340c:	8d 83       	std	Y+5, r24	; 0x05
			}while(try>0 && answer!=SAVEDPASSWORD);
    340e:	8e 81       	ldd	r24, Y+6	; 0x06
    3410:	88 23       	and	r24, r24
    3412:	19 f0       	breq	.+6      	; 0x341a <main+0xe8>
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	83 31       	cpi	r24, 0x13	; 19
    3418:	79 f7       	brne	.-34     	; 0x33f8 <main+0xc6>

			if(try==0 && answer==SAVEDPASSWORD){
    341a:	8e 81       	ldd	r24, Y+6	; 0x06
    341c:	88 23       	and	r24, r24
    341e:	29 f4       	brne	.+10     	; 0x342a <main+0xf8>
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	83 31       	cpi	r24, 0x13	; 19
    3424:	11 f4       	brne	.+4      	; 0x342a <main+0xf8>
				try=3;
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	8e 83       	std	Y+6, r24	; 0x06
			}
			/*
			 * here we Send to controller to start to Rotate the motor
			 * and we prepare the LCD to show the messages while rotating the motor
			 * */
			if(key2=='+' &&try>0){
    342a:	8f 81       	ldd	r24, Y+7	; 0x07
    342c:	8b 32       	cpi	r24, 0x2B	; 43
    342e:	79 f4       	brne	.+30     	; 0x344e <main+0x11c>
    3430:	8e 81       	ldd	r24, Y+6	; 0x06
    3432:	88 23       	and	r24, r24
    3434:	61 f0       	breq	.+24     	; 0x344e <main+0x11c>
				UART_sendByte(ROTATE_MOTOR);
    3436:	80 e3       	ldi	r24, 0x30	; 48
    3438:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
				OpeningDoor();
    343c:	0e 94 29 19 	call	0x3252	; 0x3252 <OpeningDoor>
				uint8 answerOfMotor;
				do{
				  answerOfMotor=UART_recieveByte();
    3440:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    3444:	8c 83       	std	Y+4, r24	; 0x04
				}while(answerOfMotor!=ROTATE_MOTOR);
    3446:	8c 81       	ldd	r24, Y+4	; 0x04
    3448:	80 33       	cpi	r24, 0x30	; 48
    344a:	d1 f7       	brne	.-12     	; 0x3440 <main+0x10e>
    344c:	ad cf       	rjmp	.-166    	; 0x33a8 <main+0x76>

			/*
			 * Here we just send to controller to Remove the Password form EEPROM
			 * and waiting it EREASE it
			 * */
			else if (key2=='-'&&try>0){
    344e:	8f 81       	ldd	r24, Y+7	; 0x07
    3450:	8d 32       	cpi	r24, 0x2D	; 45
    3452:	69 f4       	brne	.+26     	; 0x346e <main+0x13c>
    3454:	8e 81       	ldd	r24, Y+6	; 0x06
    3456:	88 23       	and	r24, r24
    3458:	51 f0       	breq	.+20     	; 0x346e <main+0x13c>
				UART_sendByte(EREASEPASSWORD);
    345a:	81 e2       	ldi	r24, 0x21	; 33
    345c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
				uint8 answerOfDeletedPassword;
				do{
					answerOfDeletedPassword =UART_recieveByte();
    3460:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    3464:	8b 83       	std	Y+3, r24	; 0x03
				}while(answerOfDeletedPassword!=EREASEPASSWORD);
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	81 32       	cpi	r24, 0x21	; 33
    346a:	d1 f7       	brne	.-12     	; 0x3460 <main+0x12e>
    346c:	9d cf       	rjmp	.-198    	; 0x33a8 <main+0x76>
					• Display error message on LCD for 1 minute.
					• System should be locked no inputs from Keypad will be accepted during
					  this time period
			 * */
			else{
				UART_sendByte(OPENBUZZER);
    346e:	85 e2       	ldi	r24, 0x25	; 37
    3470:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
				DisPlayErrorMessageAndDisplayInput();
    3474:	0e 94 7f 19 	call	0x32fe	; 0x32fe <DisPlayErrorMessageAndDisplayInput>
				uint8 answerOfBuzzer;
				do{
					answerOfBuzzer=UART_recieveByte();
    3478:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    347c:	8a 83       	std	Y+2, r24	; 0x02
				}while(answerOfBuzzer!=OPENBUZZER);
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	85 32       	cpi	r24, 0x25	; 37
    3482:	d1 f7       	brne	.-12     	; 0x3478 <main+0x146>
    3484:	91 cf       	rjmp	.-222    	; 0x33a8 <main+0x76>
			}
		}
		else{											// if there is no Password in EEPROM
			uint8 answer;
			do{
			UART_sendByte(CREATINGPASSWORD);			// Send to Controller to setup and be ready to Creating Password
    3486:	82 e1       	ldi	r24, 0x12	; 18
    3488:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_sendByte>
			CreatingPassword();
    348c:	0e 94 52 18 	call	0x30a4	; 0x30a4 <CreatingPassword>
			answer=UART_recieveByte();
    3490:	0e 94 0b 0b 	call	0x1616	; 0x1616 <UART_recieveByte>
    3494:	89 83       	std	Y+1, r24	; 0x01
			}while(answer!=SAVEDPASSWORD);				// looping until Controller write Password Correct in EEPROM
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	83 31       	cpi	r24, 0x13	; 19
    349a:	a9 f7       	brne	.-22     	; 0x3486 <main+0x154>
    349c:	85 cf       	rjmp	.-246    	; 0x33a8 <main+0x76>

0000349e <__udivmodsi4>:
    349e:	a1 e2       	ldi	r26, 0x21	; 33
    34a0:	1a 2e       	mov	r1, r26
    34a2:	aa 1b       	sub	r26, r26
    34a4:	bb 1b       	sub	r27, r27
    34a6:	fd 01       	movw	r30, r26
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <__udivmodsi4_ep>

000034aa <__udivmodsi4_loop>:
    34aa:	aa 1f       	adc	r26, r26
    34ac:	bb 1f       	adc	r27, r27
    34ae:	ee 1f       	adc	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	a2 17       	cp	r26, r18
    34b4:	b3 07       	cpc	r27, r19
    34b6:	e4 07       	cpc	r30, r20
    34b8:	f5 07       	cpc	r31, r21
    34ba:	20 f0       	brcs	.+8      	; 0x34c4 <__udivmodsi4_ep>
    34bc:	a2 1b       	sub	r26, r18
    34be:	b3 0b       	sbc	r27, r19
    34c0:	e4 0b       	sbc	r30, r20
    34c2:	f5 0b       	sbc	r31, r21

000034c4 <__udivmodsi4_ep>:
    34c4:	66 1f       	adc	r22, r22
    34c6:	77 1f       	adc	r23, r23
    34c8:	88 1f       	adc	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	1a 94       	dec	r1
    34ce:	69 f7       	brne	.-38     	; 0x34aa <__udivmodsi4_loop>
    34d0:	60 95       	com	r22
    34d2:	70 95       	com	r23
    34d4:	80 95       	com	r24
    34d6:	90 95       	com	r25
    34d8:	9b 01       	movw	r18, r22
    34da:	ac 01       	movw	r20, r24
    34dc:	bd 01       	movw	r22, r26
    34de:	cf 01       	movw	r24, r30
    34e0:	08 95       	ret

000034e2 <__prologue_saves__>:
    34e2:	2f 92       	push	r2
    34e4:	3f 92       	push	r3
    34e6:	4f 92       	push	r4
    34e8:	5f 92       	push	r5
    34ea:	6f 92       	push	r6
    34ec:	7f 92       	push	r7
    34ee:	8f 92       	push	r8
    34f0:	9f 92       	push	r9
    34f2:	af 92       	push	r10
    34f4:	bf 92       	push	r11
    34f6:	cf 92       	push	r12
    34f8:	df 92       	push	r13
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	ca 1b       	sub	r28, r26
    350c:	db 0b       	sbc	r29, r27
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	09 94       	ijmp

0000351a <__epilogue_restores__>:
    351a:	2a 88       	ldd	r2, Y+18	; 0x12
    351c:	39 88       	ldd	r3, Y+17	; 0x11
    351e:	48 88       	ldd	r4, Y+16	; 0x10
    3520:	5f 84       	ldd	r5, Y+15	; 0x0f
    3522:	6e 84       	ldd	r6, Y+14	; 0x0e
    3524:	7d 84       	ldd	r7, Y+13	; 0x0d
    3526:	8c 84       	ldd	r8, Y+12	; 0x0c
    3528:	9b 84       	ldd	r9, Y+11	; 0x0b
    352a:	aa 84       	ldd	r10, Y+10	; 0x0a
    352c:	b9 84       	ldd	r11, Y+9	; 0x09
    352e:	c8 84       	ldd	r12, Y+8	; 0x08
    3530:	df 80       	ldd	r13, Y+7	; 0x07
    3532:	ee 80       	ldd	r14, Y+6	; 0x06
    3534:	fd 80       	ldd	r15, Y+5	; 0x05
    3536:	0c 81       	ldd	r16, Y+4	; 0x04
    3538:	1b 81       	ldd	r17, Y+3	; 0x03
    353a:	aa 81       	ldd	r26, Y+2	; 0x02
    353c:	b9 81       	ldd	r27, Y+1	; 0x01
    353e:	ce 0f       	add	r28, r30
    3540:	d1 1d       	adc	r29, r1
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	ed 01       	movw	r28, r26
    354e:	08 95       	ret

00003550 <itoa>:
    3550:	fb 01       	movw	r30, r22
    3552:	9f 01       	movw	r18, r30
    3554:	e8 94       	clt
    3556:	42 30       	cpi	r20, 0x02	; 2
    3558:	c4 f0       	brlt	.+48     	; 0x358a <itoa+0x3a>
    355a:	45 32       	cpi	r20, 0x25	; 37
    355c:	b4 f4       	brge	.+44     	; 0x358a <itoa+0x3a>
    355e:	4a 30       	cpi	r20, 0x0A	; 10
    3560:	29 f4       	brne	.+10     	; 0x356c <itoa+0x1c>
    3562:	97 fb       	bst	r25, 7
    3564:	1e f4       	brtc	.+6      	; 0x356c <itoa+0x1c>
    3566:	90 95       	com	r25
    3568:	81 95       	neg	r24
    356a:	9f 4f       	sbci	r25, 0xFF	; 255
    356c:	64 2f       	mov	r22, r20
    356e:	77 27       	eor	r23, r23
    3570:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__udivmodhi4>
    3574:	80 5d       	subi	r24, 0xD0	; 208
    3576:	8a 33       	cpi	r24, 0x3A	; 58
    3578:	0c f0       	brlt	.+2      	; 0x357c <itoa+0x2c>
    357a:	89 5d       	subi	r24, 0xD9	; 217
    357c:	81 93       	st	Z+, r24
    357e:	cb 01       	movw	r24, r22
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	a1 f7       	brne	.-24     	; 0x356c <itoa+0x1c>
    3584:	16 f4       	brtc	.+4      	; 0x358a <itoa+0x3a>
    3586:	5d e2       	ldi	r21, 0x2D	; 45
    3588:	51 93       	st	Z+, r21
    358a:	10 82       	st	Z, r1
    358c:	c9 01       	movw	r24, r18
    358e:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <strrev>

00003592 <strrev>:
    3592:	dc 01       	movw	r26, r24
    3594:	fc 01       	movw	r30, r24
    3596:	67 2f       	mov	r22, r23
    3598:	71 91       	ld	r23, Z+
    359a:	77 23       	and	r23, r23
    359c:	e1 f7       	brne	.-8      	; 0x3596 <strrev+0x4>
    359e:	32 97       	sbiw	r30, 0x02	; 2
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <strrev+0x18>
    35a2:	7c 91       	ld	r23, X
    35a4:	6d 93       	st	X+, r22
    35a6:	70 83       	st	Z, r23
    35a8:	62 91       	ld	r22, -Z
    35aa:	ae 17       	cp	r26, r30
    35ac:	bf 07       	cpc	r27, r31
    35ae:	c8 f3       	brcs	.-14     	; 0x35a2 <strrev+0x10>
    35b0:	08 95       	ret

000035b2 <__udivmodhi4>:
    35b2:	aa 1b       	sub	r26, r26
    35b4:	bb 1b       	sub	r27, r27
    35b6:	51 e1       	ldi	r21, 0x11	; 17
    35b8:	07 c0       	rjmp	.+14     	; 0x35c8 <__udivmodhi4_ep>

000035ba <__udivmodhi4_loop>:
    35ba:	aa 1f       	adc	r26, r26
    35bc:	bb 1f       	adc	r27, r27
    35be:	a6 17       	cp	r26, r22
    35c0:	b7 07       	cpc	r27, r23
    35c2:	10 f0       	brcs	.+4      	; 0x35c8 <__udivmodhi4_ep>
    35c4:	a6 1b       	sub	r26, r22
    35c6:	b7 0b       	sbc	r27, r23

000035c8 <__udivmodhi4_ep>:
    35c8:	88 1f       	adc	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	5a 95       	dec	r21
    35ce:	a9 f7       	brne	.-22     	; 0x35ba <__udivmodhi4_loop>
    35d0:	80 95       	com	r24
    35d2:	90 95       	com	r25
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	08 95       	ret

000035da <_exit>:
    35da:	f8 94       	cli

000035dc <__stop_program>:
    35dc:	ff cf       	rjmp	.-2      	; 0x35dc <__stop_program>
